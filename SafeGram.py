#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SafeGram 4.0 Ultimate Pro Edition
=================================

–û–ì–†–û–ú–ù–´–ô –ú–ù–û–ì–û–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ú–ï–°–°–ï–ù–î–ñ–ï–†
–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç Discord –∏ Telegram —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ñ—É–Ω–∫—Ü–∏–π

‚úÖ –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã
‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã (—ç–º—É–ª—è—Ü–∏—è)
‚úÖ –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –ø—Ä–µ–≤—å—é
‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–æ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–≤
‚úÖ –¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è
‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
‚úÖ –ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞—á–∏–≤–æ–∫ –∏ —É—Ä–æ–≤–Ω–µ–π
‚úÖ Marketplace —Å—Ç–∏–∫–µ—Ä–æ–≤
‚úÖ –ò –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π!

–ê–≤—Ç–æ—Ä: Lev
–í–µ—Ä—Å–∏—è: 4.0 Ultimate Pro
–î–∞—Ç–∞: 2025-10-06
"""
import math
import os
import sys
import json
import time
import re
import secrets
import base64
import hashlib
import smtplib
import zipfile
import io
import shutil
import mimetypes
import uuid
import threading
import queue
import sqlite3
import csv
import signal
from collections import defaultdict, deque

from email.mime.text import MIMEText
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Tuple, Union
from urllib.parse import quote, unquote

import site
sys.path.append(site.getusersitepackages())

from flask import Flask, request, jsonify, make_response, send_from_directory, abort, redirect, render_template_string, session
from flask_socketio import SocketIO, emit, join_room, leave_room, disconnect
from werkzeug.utils import secure_filename

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ psutil –¥–ª—è —Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
try:
    import psutil
except ModuleNotFoundError:
    psutil = None

# ========================================================================
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• UNDEFINED VARIABLES
# ========================================================================

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
DATA_DIR = os.path.join(BASE_DIR, "data_safegram")
UPLOAD_DIR = os.path.join(DATA_DIR, "uploads")
AVATAR_DIR = os.path.join(DATA_DIR, "avatars")
STICKERS_DIR = os.path.join(DATA_DIR, "stickers")
TEMP_DIR = os.path.join(DATA_DIR, "temp")
BACKUP_DIR = os.path.join(DATA_DIR, "backups")
LOGS_DIR = os.path.join(DATA_DIR, "logs")
VOICE_DIR = os.path.join(DATA_DIR, "voice")
THEMES_DIR = os.path.join(DATA_DIR, "themes")
BOTS_DIR = os.path.join(DATA_DIR, "bots")
USERS_DIR = os.path.join(DATA_DIR, "users")
SERVERS_DIR = os.path.join(DATA_DIR, "servers")
CHANNELS_DIR = os.path.join(DATA_DIR, "channels")
MESSAGES_DIR = os.path.join(DATA_DIR, "messages")

USERS_JSON = os.path.join(DATA_DIR, "users.json")
MESSAGES_JSON = os.path.join(DATA_DIR, "messages.json")
CHANNELS_JSON = os.path.join(DATA_DIR, "channels.json")
SERVERS_JSON = os.path.join(DATA_DIR, "servers.json")
SESSIONS_JSON = os.path.join(DATA_DIR, "sessions.json")
STATS_JSON = os.path.join(DATA_DIR, "stats.json")
FRIENDS_JSON = os.path.join(DATA_DIR, "friends.json")
BOTS_JSON = os.path.join(DATA_DIR, "bots.json")
THEMES_JSON = os.path.join(DATA_DIR, "themes.json")
ACHIEVEMENTS_JSON = os.path.join(DATA_DIR, "achievements.json")
SETTINGS_JSON = os.path.join(DATA_DIR, "settings.json")
LOGS_JSON = os.path.join(DATA_DIR, "system_logs.json")
REPORTS_JSON = os.path.join(DATA_DIR, "reports.json")
MARKETPLACE_JSON = os.path.join(DATA_DIR, "marketplace.json")
NOTIFICATIONS_JSON = os.path.join(DATA_DIR, "notifications.json")
VOICE_SESSIONS_JSON = os.path.join(DATA_DIR, "voice_sessions.json")
FILE_STORAGE_JSON = os.path.join(DATA_DIR, "file_storage.json")

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
for d in [DATA_DIR, UPLOAD_DIR, AVATAR_DIR, STICKERS_DIR, TEMP_DIR, BACKUP_DIR, LOGS_DIR, VOICE_DIR, THEMES_DIR, BOTS_DIR]:
    os.makedirs(d, exist_ok=True)

# ========================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø SafeGram 4.0 Ultimate Pro
# ========================================================================

APP_NAME = "SafeGram 4.0 Ultimate Pro"
APP_VERSION = "4.0.0"
APP_PORT = int(os.environ.get("SAFEGRAM_PORT", 8080))
DEBUG_MODE = os.environ.get("SAFEGRAM_DEBUG", "false").lower() == "true"

SECRET_KEY = os.environ.get("SAFEGRAM_SECRET", "ultra_mega_secure_key_2025")
MAX_FILE_SIZE = 100 * 1024 * 1024  # 100MB
MAX_MESSAGE_LENGTH = 4000
MAX_CHANNEL_MEMBERS = 10000
MAX_SERVERS_PER_USER = 100
MAX_CHANNELS_PER_SERVER = 500
RATE_LIMIT_MESSAGES = 30
RATE_LIMIT_FILES = 10
ONLINE_TIMEOUT = 300

SMTP_HOST = os.environ.get("SMTP_HOST", "")
SMTP_PORT = int(os.environ.get("SMTP_PORT", 587))
SMTP_USER = os.environ.get("SMTP_USER", "")
SMTP_PASS = os.environ.get("SMTP_PASS", "")
SMTP_FROM = os.environ.get("SMTP_FROM", "noreply@safegram.local")

ALLOWED_IMAGE_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg', '.bmp'}
ALLOWED_VIDEO_EXTENSIONS = {'.mp4', '.webm', '.mov', '.avi', '.mkv'}
ALLOWED_AUDIO_EXTENSIONS = {'.mp3', '.wav', '.ogg', '.m4a', '.flac'}
ALLOWED_DOCUMENT_EXTENSIONS = {'.pdf', '.doc', '.docx', '.txt', '.rtf', '.odt'}
ALLOWED_ARCHIVE_EXTENSIONS = {'.zip', '.rar', '.7z', '.tar', '.gz'}
ALLOWED_CODE_EXTENSIONS = {'.py', '.js', '.html', '.css', '.json', '.xml', '.md'}

SUPPORTED_LANGUAGES = ['ru', 'en', 'es', 'fr', 'de', 'zh', 'ja', 'ko']

# ========================================================================
# Flask –∏ SocketIO –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ========================================================================

app = Flask(__name__)
app.secret_key = SECRET_KEY
app.config['MAX_CONTENT_LENGTH'] = MAX_FILE_SIZE
app.config['UPLOAD_FOLDER'] = UPLOAD_DIR

socketio = SocketIO(app, cors_allowed_origins="*", async_mode='threading')

# Rate limiting
user_message_times = defaultdict(deque)
user_registration_ips = defaultdict(list)
banned_ips = set()

print(f"‚úÖ –ò–º–ø–æ—Ä—Ç—ã –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {APP_NAME} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

# ========================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ò –ë–ê–ó–û–í–´–ï –°–¢–†–£–ö–¢–£–†–´
# ========================================================================

# –ë–∞–∑–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
DEFAULT_SETTINGS = {
    "app_name": APP_NAME,
    "version": APP_VERSION,
    "registration_enabled": True,
    "email_verification": False,
    "max_file_size_mb": MAX_FILE_SIZE // (1024*1024),
    "default_language": "ru",
    "default_theme": "dark",
    "maintenance_mode": False,
    "debug_mode": DEBUG_MODE,
    "features": {
        "voice_channels": True,
        "file_sharing": True,
        "bots": True,
        "games": True,
        "marketplace": True,
        "achievements": True,
        "custom_themes": True
    }
}

DEFAULT_USER = {
    "id": "",
    "username": "",
    "email": "",
    "password_hash": "",
    "avatar": "",
    "status": "online",  # online, idle, busy, offline
    "custom_status": "",
    "created_at": 0,
    "last_seen": 0,
    "language": "ru",
    "theme": "dark",
    "level": 1,
    "experience": 0,
    "achievements": [],
    "friends": [],
    "blocked_users": [],
    "servers": [],
    "settings": {
        "show_online_status": True,
        "allow_friend_requests": True,
        "allow_server_invites": True,
        "notifications": True,
        "sound_notifications": True,
        "email_notifications": False
    },
    "statistics": {
        "messages_sent": 0,
        "files_shared": 0,
        "voice_time": 0,
        "servers_joined": 0
    }
}

DEFAULT_SERVER = {
    "id": "",
    "name": "",
    "description": "",
    "icon": "",
    "owner_id": "",
    "created_at": 0,
    "members": [],
    "channels": [],
    "roles": [],
    "settings": {
        "public": False,
        "invite_only": True,
        "member_verification": False,
        "explicit_content_filter": True,
        "default_notifications": True
    },
    "statistics": {
        "member_count": 0,
        "message_count": 0,
        "channel_count": 0
    }
}

DEFAULT_CHANNEL = {
    "id": "",
    "name": "",
    "type": "text",  # text, voice, category, announcement
    "server_id": "",
    "category_id": "",
    "position": 0,
    "topic": "",
    "created_at": 0,
    "permissions": {},
    "settings": {
        "nsfw": False,
        "slowmode": 0,
        "auto_archive": False
    },
    "statistics": {
        "message_count": 0
    }
}

DEFAULT_MESSAGE = {
    "id": "",
    "channel_id": "",
    "server_id": "",
    "author_id": "",
    "content": "",
    "type": "default",  # default, system, bot, embed
    "created_at": 0,
    "edited_at": 0,
    "attachments": [],
    "embeds": [],
    "reactions": {},
    "mentions": [],
    "reply_to": None,
    "pinned": False,
    "deleted": False,
    "flags": []
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON —Ñ–∞–π–ª–æ–≤ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
INITIAL_DATA = {
    USERS_JSON: [
        {
            **DEFAULT_USER,
            "id": "system",
            "username": "System",
            "email": "system@safegram.local",
            "avatar": "ü§ñ",
            "status": "online",
            "level": 99,
            "created_at": time.time()
        }
    ],
    MESSAGES_JSON: [],
    CHANNELS_JSON: [
        {
            **DEFAULT_CHANNEL,
            "id": "general",
            "name": "–æ–±—â–∏–π",
            "type": "text",
            "server_id": "main",
            "created_at": time.time()
        },
        {
            **DEFAULT_CHANNEL,
            "id": "voice_general",
            "name": "–û–±—â–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–π",
            "type": "voice",
            "server_id": "main",
            "created_at": time.time()
        }
    ],
    SERVERS_JSON: [
        {
            **DEFAULT_SERVER,
            "id": "main",
            "name": "SafeGram Community",
            "description": "–ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä SafeGram",
            "icon": "üè†",
            "owner_id": "system",
            "channels": ["general", "voice_general"],
            "members": ["system"],
            "created_at": time.time()
        }
    ],
    FRIENDS_JSON: {},
    BOTS_JSON: [
        {
            "id": "welcome_bot",
            "name": "Welcome Bot",
            "description": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "avatar": "üëã",
            "status": "online",
            "commands": ["/welcome", "/help"],
            "created_at": time.time()
        }
    ],
    THEMES_JSON: [
        {
            "id": "dark",
            "name": "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞",
            "author": "SafeGram Team",
            "colors": {
                "primary": "#0a0a0f",
                "secondary": "#161620",
                "accent": "#00d4ff",
                "text": "#ffffff",
                "background": "#1f1f2e"
            },
            "default": True
        },
        {
            "id": "light",
            "name": "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞",
            "author": "SafeGram Team", 
            "colors": {
                "primary": "#ffffff",
                "secondary": "#f5f7fb",
                "accent": "#007acc",
                "text": "#111111",
                "background": "#ffffff"
            },
            "default": False
        },
        {
            "id": "cyberpunk",
            "name": "–ö–∏–±–µ—Ä–ø–∞–Ω–∫",
            "author": "SafeGram Team",
            "colors": {
                "primary": "#0d1117",
                "secondary": "#21262d",
                "accent": "#ff0080",
                "text": "#00ff80",
                "background": "#161b22"
            },
            "default": False
        }
    ],
    ACHIEVEMENTS_JSON: [
        {
            "id": "first_message",
            "name": "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "description": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "icon": "üí¨",
            "reward_xp": 10
        },
        {
            "id": "friend_maker",
            "name": "–ó–∞–≤–æ–¥–∏–ª–∞",
            "description": "–î–æ–±–∞–≤—å—Ç–µ 10 –¥—Ä—É–∑–µ–π",
            "icon": "üë•",
            "reward_xp": 50
        },
        {
            "id": "server_creator",
            "name": "–°–æ–∑–¥–∞—Ç–µ–ª—å",
            "description": "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä",
            "icon": "üèóÔ∏è",
            "reward_xp": 100
        }
    ],
    SETTINGS_JSON: DEFAULT_SETTINGS,
    STATS_JSON: {
        "total_users": 1,
        "total_messages": 0,
        "total_servers": 1,
        "total_channels": 2,
        "uptime_start": time.time(),
        "daily_stats": {},
        "popular_features": {}
    },
    SESSIONS_JSON: {},
    LOGS_JSON: [],
    REPORTS_JSON: [],
    MARKETPLACE_JSON: [
        {
            "id": "basic_emoji_pack",
            "name": "–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä —ç–º–æ–¥–∑–∏",
            "type": "stickers",
            "price": 0,
            "author": "SafeGram Team",
            "downloads": 0,
            "rating": 5.0,
            "created_at": time.time()
        }
    ]
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
def initialize_data_files():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö JSON —Ñ–∞–π–ª–æ–≤ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    for file_path, default_data in INITIAL_DATA.items():
        if not os.path.exists(file_path):
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(default_data, f, ensure_ascii=False, indent=2)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {file_path}: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
initialize_data_files()

# ========================================================================
# –ë–ê–ó–û–í–´–ï –£–¢–ò–õ–ò–¢–´ –ò –ü–û–ú–û–©–ù–ò–ö–ò
# ========================================================================

def load_json(filepath: str, default=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–∞"""
    if default is None:
        default = []
    try:
        if os.path.exists(filepath):
            with open(filepath, 'r', encoding='utf-8') as f:
                return json.load(f)
        return default
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filepath}: {e}")
        return default

def save_json(filepath: str, data):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        if os.path.exists(filepath):
            backup_path = filepath + '.backup'
            shutil.copy2(filepath, backup_path)

        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filepath}: {e}")
        return False

def generate_id(prefix: str = "") -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID"""
    timestamp = str(int(time.time() * 1000))[-8:]
    random_part = secrets.token_hex(4)
    return f"{prefix}_{timestamp}_{random_part}" if prefix else f"{timestamp}_{random_part}"

def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    salt = secrets.token_hex(16)
    pwd_hash = hashlib.pbkdf2_hmac('sha256', password.encode(), salt.encode(), 100000)
    return f"{salt}${base64.b64encode(pwd_hash).decode()}"

def verify_password(password: str, hash_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    try:
        salt, pwd_hash = hash_str.split('$')
        expected_hash = hashlib.pbkdf2_hmac('sha256', password.encode(), salt.encode(), 100000)
        return base64.b64encode(expected_hash).decode() == pwd_hash
    except:
        return False

def log_event(event_type: str, description: str, user_id: str = "system", 
              additional_data: dict = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–∏—Å—Ç–µ–º—ã"""
    logs = load_json(LOGS_JSON, [])
    log_entry = {
        "id": generate_id("log"),
        "timestamp": time.time(),
        "type": event_type,
        "user_id": user_id,
        "description": description,
        "data": additional_data or {},
        "ip": request.remote_addr if request else "localhost"
    }
    logs.append(log_entry)

    # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5000 –∑–∞–ø–∏—Å–µ–π
    if len(logs) > 5000:
        logs = logs[-5000:]

    save_json(LOGS_JSON, logs)

def log_error(message: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    log_event("error", message)
    if DEBUG_MODE:
        print(f"‚ùå ERROR: {message}")

def log_info(message: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    log_event("info", message)
    if DEBUG_MODE:
        print(f"‚ÑπÔ∏è INFO: {message}")

def get_file_type(filename: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
    ext = os.path.splitext(filename.lower())[1]
    if ext in ALLOWED_IMAGE_EXTENSIONS:
        return "image"
    elif ext in ALLOWED_VIDEO_EXTENSIONS:
        return "video"
    elif ext in ALLOWED_AUDIO_EXTENSIONS:
        return "audio"
    elif ext in ALLOWED_DOCUMENT_EXTENSIONS:
        return "document"
    elif ext in ALLOWED_ARCHIVE_EXTENSIONS:
        return "archive"
    elif ext in ALLOWED_CODE_EXTENSIONS:
        return "code"
    else:
        return "file"

def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if size_bytes == 0:
        return "0 B"
    size_names = ["B", "KB", "MB", "GB", "TB"]
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    return f"{s} {size_names[i]}"

def is_valid_email(email: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ email"""
    pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
    return re.match(pattern, email) is not None

def sanitize_username(username: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    clean = re.sub(r'[^a-zA-Z0-9_-]', '', username)
    return clean[:32]  # –ú–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞

def get_user_level(experience: int) -> int:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –æ–ø—ã—Ç—É"""
    # –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–±—É–µ—Ç –≤ 1.5 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞
    level = 1
    required_xp = 100
    current_xp = 0

    while current_xp + required_xp <= experience:
        current_xp += required_xp
        level += 1
        required_xp = int(required_xp * 1.5)

    return min(level, 100)  # –ú–∞–∫—Å–∏–º—É–º 100 —É—Ä–æ–≤–µ–Ω—å

print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –±–∞–∑–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã")

# ========================================================================
# –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
# ========================================================================

class UserManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""

    @staticmethod
    def create_user(username: str, email: str, password: str) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        users = load_json(USERS_JSON, [])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        if any(u['email'].lower() == email.lower() for u in users):
            return {"success": False, "error": "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"}

        if any(u['username'].lower() == username.lower() for u in users):
            return {"success": False, "error": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ"}

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = {
            **DEFAULT_USER,
            "id": generate_id("user"),
            "username": sanitize_username(username),
            "email": email.lower(),
            "password_hash": hash_password(password),
            "created_at": time.time(),
            "last_seen": time.time()
        }

        users.append(user)
        save_json(USERS_JSON, users)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–ª–∞–≤–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
        servers = load_json(SERVERS_JSON, [])
        main_server = next((s for s in servers if s['id'] == 'main'), None)
        if main_server and user['id'] not in main_server['members']:
            main_server['members'].append(user['id'])
            save_json(SERVERS_JSON, servers)

        log_event("user_created", f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}", user['id'])

        # –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        AchievementManager.award_achievement(user['id'], 'first_registration')

        return {"success": True, "user": user}

    @staticmethod
    def get_user_by_id(user_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        users = load_json(USERS_JSON, [])
        return next((u for u in users if u['id'] == user_id), None)

    @staticmethod
    def get_user_by_email(email: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
        users = load_json(USERS_JSON, [])
        return next((u for u in users if u['email'].lower() == email.lower()), None)

    @staticmethod
    def update_user(user_id: str, updates: dict) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        users = load_json(USERS_JSON, [])
        user = next((u for u in users if u['id'] == user_id), None)

        if not user:
            return False

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        allowed_fields = ['username', 'status', 'custom_status', 'language', 
                         'theme', 'settings', 'avatar', 'last_seen']

        for field, value in updates.items():
            if field in allowed_fields:
                user[field] = value

        save_json(USERS_JSON, users)
        log_event("user_updated", f"–û–±–Ω–æ–≤–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}", user_id)
        return True

    @staticmethod
    def delete_user(user_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        users = load_json(USERS_JSON, [])
        user = next((u for u in users if u['id'] == user_id), None)

        if not user:
            return False

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        servers = load_json(SERVERS_JSON, [])
        for server in servers:
            if user_id in server['members']:
                server['members'].remove(user_id)
        save_json(SERVERS_JSON, servers)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
        messages = load_json(MESSAGES_JSON, [])
        for msg in messages:
            if msg['author_id'] == user_id:
                msg['deleted'] = True
                msg['content'] = "[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω]"
        save_json(MESSAGES_JSON, messages)

        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = [u for u in users if u['id'] != user_id]
        save_json(USERS_JSON, users)

        log_event("user_deleted", f"–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['username']}", "system")
        return True

    @staticmethod
    def authenticate_user(email: str, password: str) -> Optional[dict]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = UserManager.get_user_by_email(email)

        if user and 'password_hash' in user and verify_password(password, user['password_hash']):
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
            UserManager.update_user(user['id'], {"last_seen": time.time()})
            log_event("user_login", f"–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user['username']}", user['id'])
            return user

        log_event("login_failed", f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {email}")
        return None

    @staticmethod
    def get_online_users() -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = load_json(USERS_JSON, [])
        sessions = load_json(SESSIONS_JSON, {})
        current_time = time.time()

        online_users = []
        for user in users:
            session = sessions.get(user['id'])
            if session and (current_time - session.get('last_activity', 0)) < ONLINE_TIMEOUT:
                user_copy = user.copy()
                user_copy.pop('password_hash', None)  # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
                online_users.append(user_copy)

        return online_users

    @staticmethod
    def add_friend(user_id: str, friend_id: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è"""
        if user_id == friend_id:
            return False

        users = load_json(USERS_JSON, [])
        user = next((u for u in users if u['id'] == user_id), None)
        friend = next((u for u in users if u['id'] == friend_id), None)

        if not user or not friend:
            return False

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∑–∞–∏–º–Ω–æ
        if friend_id not in user['friends']:
            user['friends'].append(friend_id)

        if user_id not in friend['friends']:
            friend['friends'].append(user_id)

        save_json(USERS_JSON, users)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        if len(user['friends']) >= 10:
            AchievementManager.award_achievement(user_id, 'friend_maker')

        log_event("friend_added", f"{user['username']} –¥–æ–±–∞–≤–∏–ª –≤ –¥—Ä—É–∑—å—è {friend['username']}", user_id)
        return True

    @staticmethod
    def remove_friend(user_id: str, friend_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–∑–µ–π"""
        users = load_json(USERS_JSON, [])
        user = next((u for u in users if u['id'] == user_id), None)
        friend = next((u for u in users if u['id'] == friend_id), None)

        if not user or not friend:
            return False

        # –£–¥–∞–ª—è–µ–º –≤–∑–∞–∏–º–Ω–æ
        if friend_id in user['friends']:
            user['friends'].remove(friend_id)

        if user_id in friend['friends']:
            friend['friends'].remove(user_id)

        save_json(USERS_JSON, users)
        log_event("friend_removed", f"{user['username']} —É–¥–∞–ª–∏–ª –∏–∑ –¥—Ä—É–∑–µ–π {friend['username']}", user_id)
        return True

def get_current_user():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ session['user_id'].
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None.
    """
    user_id = session.get('user_id')
    if not user_id:
        return None

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ¬´–∞–¥–º–∏–Ω¬ª
    if user_id == 'admin':
        return {
            "id": "admin",
            "username": "Administrator",
            "email": "admin@safegram.local",
            "is_admin": True,
            "is_guest": False,
            "status": "online",
            "avatar": "üëë"
        }

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        users = []
        if os.path.exists(USERS_JSON):
            with open(USERS_JSON, 'r', encoding='utf-8') as f:
                users = json.load(f)
    except Exception:
        users = []

    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
    user = next((u for u in users if u.get('id') == user_id), None)

    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏, –æ–±–Ω–æ–≤–∏–º last_seen –∏ —Å—Ç–∞—Ç—É—Å
    if user:
        user['last_seen'] = time.time()
        user['status'] = 'online'

    return user


# ========================================================================
# –°–ò–°–¢–ï–ú–ê –°–ï–°–°–ò–ô
# ========================================================================

class SessionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    @staticmethod
    def create_session(user_id: str, ip_address: str = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        sessions = load_json(SESSIONS_JSON, {})

        session_token = secrets.token_hex(32)
        session_data = {
            "user_id": user_id,
            "created_at": time.time(),
            "last_activity": time.time(),
            "ip_address": ip_address or request.remote_addr if request else "unknown",
            "user_agent": request.headers.get('User-Agent', 'unknown') if request else "unknown"
        }

        sessions[session_token] = session_data
        save_json(SESSIONS_JSON, sessions)

        log_event("session_created", f"–°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}", user_id)
        return session_token

    @staticmethod
    def validate_session(session_token: str) -> Optional[dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
        if not session_token:
            return None

        sessions = load_json(SESSIONS_JSON, {})
        session = sessions.get(session_token)

        if not session:
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
        current_time = time.time()
        if current_time - session['last_activity'] > ONLINE_TIMEOUT * 6:  # 30 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            SessionManager.delete_session(session_token)
            return None

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        session['last_activity'] = current_time
        sessions[session_token] = session
        save_json(SESSIONS_JSON, sessions)

        return session

    @staticmethod
    def delete_session(session_token: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        sessions = load_json(SESSIONS_JSON, {})

        if session_token in sessions:
            user_id = sessions[session_token].get('user_id', 'unknown')
            del sessions[session_token]
            save_json(SESSIONS_JSON, sessions)
            log_event("session_deleted", f"–£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}", user_id)
            return True

        return False

    @staticmethod
    def cleanup_expired_sessions():
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π"""
        sessions = load_json(SESSIONS_JSON, {})
        current_time = time.time()
        expired_tokens = []

        for token, session in sessions.items():
            if current_time - session['last_activity'] > ONLINE_TIMEOUT * 12:  # 1 —á–∞—Å
                expired_tokens.append(token)

        for token in expired_tokens:
            del sessions[token]

        if expired_tokens:
            save_json(SESSIONS_JSON, sessions)
            log_event("sessions_cleaned", f"–û—á–∏—â–µ–Ω–æ {len(expired_tokens)} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π", "system")

    @staticmethod
    def get_current_user():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏"""
        session_token = request.cookies.get('session_token')
        if not session_token:
            return None

        session = SessionManager.validate_session(session_token)
        if not session:
            return None

        return UserManager.get_user_by_id(session['user_id'])

# ========================================================================
# –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô
# ========================================================================

class AchievementManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    @staticmethod
    def award_achievement(user_id: str, achievement_id: str) -> bool:
        """–ü—Ä–∏—Å—É–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        users = load_json(USERS_JSON, [])
        achievements = load_json(ACHIEVEMENTS_JSON, [])

        user = next((u for u in users if u['id'] == user_id), None)
        achievement = next((a for a in achievements if a['id'] == achievement_id), None)

        if not user or not achievement:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        if achievement_id in user.get('achievements', []):
            return False

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        if 'achievements' not in user:
            user['achievements'] = []

        user['achievements'].append({
            "id": achievement_id,
            "earned_at": time.time()
        })

        # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç
        if 'experience' not in user:
            user['experience'] = 0

        user['experience'] += achievement.get('reward_xp', 0)
        user['level'] = get_user_level(user['experience'])

        save_json(USERS_JSON, users)

        log_event("achievement_awarded", 
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['username']} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement['name']}", 
                 user_id)

        return True

    @staticmethod
    def get_user_achievements(user_id: str) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = UserManager.get_user_by_id(user_id)
        achievements = load_json(ACHIEVEMENTS_JSON, [])

        if not user:
            return []

        user_achievements = user.get('achievements', [])
        result = []

        for user_achievement in user_achievements:
            achievement = next((a for a in achievements if a['id'] == user_achievement['id']), None)
            if achievement:
                result.append({
                    **achievement,
                    "earned_at": user_achievement['earned_at']
                })

        return result

    @staticmethod
    def get_available_achievements() -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        return load_json(ACHIEVEMENTS_JSON, [])

print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —Å–µ—Å—Å–∏–π –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")

# ========================================================================
# –°–ò–°–¢–ï–ú–ê –°–ï–†–í–ï–†–û–í –ò –ö–ê–ù–ê–õ–û–í
# ========================================================================

class ServerManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–µ—Ä–æ–≤ (–∞–Ω–∞–ª–æ–≥ Discord —Å–µ—Ä–≤–µ—Ä–æ–≤)"""

    @staticmethod
    def create_server(name: str, description: str, owner_id: str, icon: str = "üè†") -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        servers = load_json(SERVERS_JSON, [])

        server = {
            **DEFAULT_SERVER,
            "id": generate_id("server"),
            "name": name,
            "description": description,
            "icon": icon,
            "owner_id": owner_id,
            "created_at": time.time(),
            "members": [owner_id]
        }

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
        general_channel = {
            **DEFAULT_CHANNEL,
            "id": generate_id("channel"),
            "name": "–æ–±—â–∏–π",
            "type": "text",
            "server_id": server["id"],
            "created_at": time.time()
        }

        voice_channel = {
            **DEFAULT_CHANNEL,
            "id": generate_id("channel"),
            "name": "–û–±—â–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–π",
            "type": "voice",
            "server_id": server["id"],
            "created_at": time.time()
        }

        server["channels"] = [general_channel["id"], voice_channel["id"]]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä
        servers.append(server)
        save_json(SERVERS_JSON, servers)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª—ã
        channels = load_json(CHANNELS_JSON, [])
        channels.extend([general_channel, voice_channel])
        save_json(CHANNELS_JSON, channels)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = load_json(USERS_JSON, [])
        user = next((u for u in users if u['id'] == owner_id), None)
        if user:
            if 'servers' not in user:
                user['servers'] = []
            user['servers'].append(server['id'])
            save_json(USERS_JSON, users)

            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
            AchievementManager.award_achievement(owner_id, 'server_creator')

        log_event("server_created", f"–°–æ–∑–¥–∞–Ω —Å–µ—Ä–≤–µ—Ä: {name}", owner_id)
        return {"success": True, "server": server}

    @staticmethod
    def get_server_by_id(server_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ ID"""
        servers = load_json(SERVERS_JSON, [])
        return next((s for s in servers if s['id'] == server_id), None)

    @staticmethod
    def get_user_servers(user_id: str) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        servers = load_json(SERVERS_JSON, [])
        user_servers = []

        for server in servers:
            if user_id in server.get('members', []):
                user_servers.append(server)

        return user_servers

    @staticmethod
    def join_server(server_id: str, user_id: str) -> bool:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        servers = load_json(SERVERS_JSON, [])
        server = next((s for s in servers if s['id'] == server_id), None)

        if not server or user_id in server.get('members', []):
            return False

        server['members'].append(user_id)
        server['statistics']['member_count'] = len(server['members'])
        save_json(SERVERS_JSON, servers)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = load_json(USERS_JSON, [])
        user = next((u for u in users if u['id'] == user_id), None)
        if user:
            if 'servers' not in user:
                user['servers'] = []
            if server_id not in user['servers']:
                user['servers'].append(server_id)
                user['statistics']['servers_joined'] = user['statistics'].get('servers_joined', 0) + 1
            save_json(USERS_JSON, users)

        log_event("server_joined", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {server['name']}", user_id)
        return True

    @staticmethod
    def leave_server(server_id: str, user_id: str) -> bool:
        """–ü–æ–∫–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        servers = load_json(SERVERS_JSON, [])
        server = next((s for s in servers if s['id'] == server_id), None)

        if not server or user_id not in server.get('members', []):
            return False

        # –ù–µ–ª—å–∑—è –ø–æ–∫–∏–Ω—É—Ç—å —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ —Ç—ã –µ–≥–æ –≤–ª–∞–¥–µ–ª–µ—Ü
        if server['owner_id'] == user_id:
            return False

        server['members'].remove(user_id)
        server['statistics']['member_count'] = len(server['members'])
        save_json(SERVERS_JSON, servers)

        # –£–¥–∞–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = load_json(USERS_JSON, [])
        user = next((u for u in users if u['id'] == user_id), None)
        if user and 'servers' in user and server_id in user['servers']:
            user['servers'].remove(server_id)
            save_json(USERS_JSON, users)

        log_event("server_left", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä: {server['name']}", user_id)
        return True

class ChannelManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–Ω–∞–ª–æ–≤"""

    @staticmethod
    def create_channel(server_id: str, name: str, channel_type: str = "text", 
                      topic: str = "", creator_id: str = None) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        channels = load_json(CHANNELS_JSON, [])
        servers = load_json(SERVERS_JSON, [])

        server = next((s for s in servers if s['id'] == server_id), None)
        if not server:
            return {"success": False, "error": "–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        channel = {
            **DEFAULT_CHANNEL,
            "id": generate_id("channel"),
            "name": name,
            "type": channel_type,
            "server_id": server_id,
            "topic": topic,
            "created_at": time.time()
        }

        channels.append(channel)
        save_json(CHANNELS_JSON, channels)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –∫ —Å–µ—Ä–≤–µ—Ä—É
        server['channels'].append(channel['id'])
        server['statistics']['channel_count'] = len(server['channels'])
        save_json(SERVERS_JSON, servers)

        log_event("channel_created", f"–°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª: {name} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {server['name']}", creator_id)
        return {"success": True, "channel": channel}

    @staticmethod
    def get_channel_by_id(channel_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ ID"""
        channels = load_json(CHANNELS_JSON, [])
        return next((c for c in channels if c['id'] == channel_id), None)

    @staticmethod
    def get_server_channels(server_id: str) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"""
        channels = load_json(CHANNELS_JSON, [])
        return [c for c in channels if c['server_id'] == server_id]

    @staticmethod
    def delete_channel(channel_id: str, user_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
        channels = load_json(CHANNELS_JSON, [])
        channel = next((c for c in channels if c['id'] == channel_id), None)

        if not channel:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞)
        server = ServerManager.get_server_by_id(channel['server_id'])
        if not server or server['owner_id'] != user_id:
            return False

        # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
        channels = [c for c in channels if c['id'] != channel_id]
        save_json(CHANNELS_JSON, channels)

        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞
        servers = load_json(SERVERS_JSON, [])
        server = next((s for s in servers if s['id'] == channel['server_id']), None)
        if server and channel_id in server['channels']:
            server['channels'].remove(channel_id)
            save_json(SERVERS_JSON, servers)

        log_event("channel_deleted", f"–£–¥–∞–ª–µ–Ω –∫–∞–Ω–∞–ª: {channel['name']}", user_id)
        return True

# ========================================================================
# –°–ò–°–¢–ï–ú–ê –°–û–û–ë–©–ï–ù–ò–ô
# ========================================================================

class MessageManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π"""

    @staticmethod
    def send_message(channel_id: str, author_id: str, content: str, 
                    message_type: str = "default", attachments: List = None,
                    reply_to: str = None) -> dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        messages = load_json(MESSAGES_JSON, [])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª
        channel = ChannelManager.get_channel_by_id(channel_id)
        if not channel:
            return {"success": False, "error": "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(content) > MAX_MESSAGE_LENGTH:
            return {"success": False, "error": f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"}

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = {
            **DEFAULT_MESSAGE,
            "id": generate_id("msg"),
            "channel_id": channel_id,
            "server_id": channel['server_id'],
            "author_id": author_id,
            "content": content,
            "type": message_type,
            "created_at": time.time(),
            "attachments": attachments or [],
            "reply_to": reply_to
        }

        messages.append(message)
        save_json(MESSAGES_JSON, messages)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞
        channels = load_json(CHANNELS_JSON, [])
        channel = next((c for c in channels if c['id'] == channel_id), None)
        if channel:
            channel['statistics']['message_count'] += 1
            save_json(CHANNELS_JSON, channels)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = load_json(USERS_JSON, [])
        user = next((u for u in users if u['id'] == author_id), None)
        if user:
            user['statistics']['messages_sent'] = user['statistics'].get('messages_sent', 0) + 1
            user['experience'] = user.get('experience', 0) + 1  # 1 XP –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user['level'] = get_user_level(user['experience'])
            save_json(USERS_JSON, users)

            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if user['statistics']['messages_sent'] == 1:
                AchievementManager.award_achievement(author_id, 'first_message')

        log_event("message_sent", f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: {channel['name']}", author_id)
        return {"success": True, "message": message}

    @staticmethod
    def get_channel_messages(channel_id: str, limit: int = 50, before: str = None) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞"""
        messages = load_json(MESSAGES_JSON, [])

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞–Ω–∞–ª—É –∏ –Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ
        channel_messages = [m for m in messages 
                          if m['channel_id'] == channel_id and not m.get('deleted', False)]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        channel_messages.sort(key=lambda x: x['created_at'], reverse=True)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        if before:
            before_timestamp = float(before)
            channel_messages = [m for m in channel_messages if m['created_at'] < before_timestamp]

        return channel_messages[:limit]

    @staticmethod
    def edit_message(message_id: str, user_id: str, new_content: str) -> bool:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        messages = load_json(MESSAGES_JSON, [])
        message = next((m for m in messages if m['id'] == message_id), None)

        if not message or message['author_id'] != user_id or message.get('deleted'):
            return False

        message['content'] = new_content
        message['edited_at'] = time.time()
        save_json(MESSAGES_JSON, messages)

        log_event("message_edited", f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_id}", user_id)
        return True

    @staticmethod
    def delete_message(message_id: str, user_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        messages = load_json(MESSAGES_JSON, [])
        message = next((m for m in messages if m['id'] == message_id), None)

        if not message:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        can_delete = False

        # –ê–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message['author_id'] == user_id:
            can_delete = True

        # –í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message['server_id']:
            server = ServerManager.get_server_by_id(message['server_id'])
            if server and server['owner_id'] == user_id:
                can_delete = True

        if not can_delete:
            return False

        message['deleted'] = True
        message['content'] = "[–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ]"
        save_json(MESSAGES_JSON, messages)

        log_event("message_deleted", f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_id}", user_id)
        return True

    @staticmethod
    def pin_message(message_id: str, user_id: str) -> bool:
        """–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        messages = load_json(MESSAGES_JSON, [])
        message = next((m for m in messages if m['id'] == message_id), None)

        if not message:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (–≤–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞)
        server = ServerManager.get_server_by_id(message['server_id'])
        if not server or server['owner_id'] != user_id:
            return False

        message['pinned'] = not message.get('pinned', False)
        save_json(MESSAGES_JSON, messages)

        action = "–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ" if message['pinned'] else "–æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ"
        log_event("message_pinned", f"–°–æ–æ–±—â–µ–Ω–∏–µ {action}: {message_id}", user_id)
        return True

    @staticmethod
    def add_reaction(message_id: str, user_id: str, emoji: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é"""
        messages = load_json(MESSAGES_JSON, [])
        message = next((m for m in messages if m['id'] == message_id), None)

        if not message:
            return False

        if 'reactions' not in message:
            message['reactions'] = {}

        if emoji not in message['reactions']:
            message['reactions'][emoji] = []

        if user_id not in message['reactions'][emoji]:
            message['reactions'][emoji].append(user_id)
        else:
            message['reactions'][emoji].remove(user_id)
            if not message['reactions'][emoji]:
                del message['reactions'][emoji]

        save_json(MESSAGES_JSON, messages)
        return True

    @staticmethod
    def search_messages(query: str, channel_id: str = None, user_id: str = None, 
                       limit: int = 50) -> List[dict]:
        """–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        messages = load_json(MESSAGES_JSON, [])

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        filtered_messages = []
        for message in messages:
            if message.get('deleted'):
                continue

            # –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            if query.lower() not in message.get('content', '').lower():
                continue

            # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞–Ω–∞–ª—É
            if channel_id and message['channel_id'] != channel_id:
                continue

            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if user_id and message['author_id'] != user_id:
                continue

            filtered_messages.append(message)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        filtered_messages.sort(key=lambda x: x['created_at'], reverse=True)

        return filtered_messages[:limit]

print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–∏—Å—Ç–µ–º—ã —Å–µ—Ä–≤–µ—Ä–æ–≤, –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π")

# ========================================================================
# –°–ò–°–¢–ï–ú–ê –§–ê–ô–õ–û–í –ò –ú–ï–î–ò–ê
# ========================================================================

class FileManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∞–π–ª–æ–≤ –∏ –º–µ–¥–∏–∞"""

    @staticmethod
    def upload_file(file, user_id: str, channel_id: str = None) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
        try:
            if not file or not file.filename:
                return {"success": False, "error": "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file.seek(0, os.SEEK_END)
            file_size = file.tell()
            file.seek(0)

            if file_size > MAX_FILE_SIZE:
                return {"success": False, "error": f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {MAX_FILE_SIZE//1024//1024}MB"}

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            filename = secure_filename(file.filename)
            file_id = generate_id("file")
            file_ext = os.path.splitext(filename)[1].lower()
            safe_filename = f"{file_id}{file_ext}"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–ø–∞–ø–∫—É –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
            file_type = get_file_type(filename)
            subfolder = {
                "image": "images",
                "video": "videos", 
                "audio": "audio",
                "document": "documents",
                "archive": "archives",
                "code": "code"
            }.get(file_type, "other")

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            upload_subfolder = os.path.join(UPLOAD_DIR, subfolder)
            os.makedirs(upload_subfolder, exist_ok=True)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            file_path = os.path.join(upload_subfolder, safe_filename)
            file.save(file_path)

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ
            file_record = {
                "id": file_id,
                "original_name": filename,
                "safe_name": safe_filename,
                "path": os.path.join(subfolder, safe_filename),
                "size": file_size,
                "type": file_type,
                "mime_type": mimetypes.guess_type(filename)[0],
                "uploaded_by": user_id,
                "channel_id": channel_id,
                "uploaded_at": time.time(),
                "download_count": 0
            }

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            users = load_json(USERS_JSON, [])
            user = next((u for u in users if u['id'] == user_id), None)
            if user:
                user['statistics']['files_shared'] = user['statistics'].get('files_shared', 0) + 1
                user['experience'] = user.get('experience', 0) + 5  # 5 XP –∑–∞ —Ñ–∞–π–ª
                user['level'] = get_user_level(user['experience'])
                save_json(USERS_JSON, users)

            log_event("file_uploaded", f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename} ({format_file_size(file_size)})", user_id)

            return {
                "success": True,
                "file": file_record,
                "url": f"/uploads/{subfolder}/{safe_filename}"
            }

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"}

    @staticmethod
    def get_file_info(file_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—ã–ª–∞ –±—ã –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ñ–∞–π–ª–æ–≤
        # –ü–æ–∫–∞ –∏—â–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        messages = load_json(MESSAGES_JSON, [])
        for message in messages:
            for attachment in message.get('attachments', []):
                if attachment.get('id') == file_id:
                    return attachment
        return None

    @staticmethod
    def delete_file(file_id: str, user_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        file_info = FileManager.get_file_info(file_id)
        if not file_info or file_info['uploaded_by'] != user_id:
            return False

        try:
            file_path = os.path.join(UPLOAD_DIR, file_info['path'])
            if os.path.exists(file_path):
                os.remove(file_path)

            log_event("file_deleted", f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_info['original_name']}", user_id)
            return True
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False

    @staticmethod
    def get_user_files(user_id: str, file_type: str = None, limit: int = 50) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        messages = load_json(MESSAGES_JSON, [])
        user_files = []

        for message in messages:
            if message['author_id'] == user_id:
                for attachment in message.get('attachments', []):
                    if not file_type or attachment.get('type') == file_type:
                        user_files.append({
                            **attachment,
                            "message_id": message['id'],
                            "channel_id": message['channel_id']
                        })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        user_files.sort(key=lambda x: x.get('uploaded_at', 0), reverse=True)
        return user_files[:limit]

    @staticmethod
    def create_thumbnail(file_path: str, file_type: str) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é
        # –∏—Å–ø–æ–ª—å–∑—É—è PIL –∏–ª–∏ –¥—Ä—É–≥–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        if file_type == "image":
            return f"{file_path}_thumb.jpg"
        return None

# ========================================================================
# –°–ò–°–¢–ï–ú–ê –ë–û–¢–û–í
# ========================================================================

class BotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–≤"""

    @staticmethod
    def create_bot(name: str, description: str, creator_id: str, commands: List[str] = None) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        bots = load_json(BOTS_JSON, [])

        bot = {
            "id": generate_id("bot"),
            "name": name,
            "description": description,
            "avatar": "ü§ñ",
            "creator_id": creator_id,
            "status": "online",
            "commands": commands or [],
            "created_at": time.time(),
            "message_count": 0,
            "servers": [],
            "settings": {
                "auto_respond": True,
                "learn_from_messages": False,
                "moderate_content": False
            }
        }

        bots.append(bot)
        save_json(BOTS_JSON, bots)

        log_event("bot_created", f"–°–æ–∑–¥–∞–Ω –±–æ—Ç: {name}", creator_id)
        return {"success": True, "bot": bot}

    @staticmethod
    def get_bot_by_id(bot_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–∞ –ø–æ ID"""
        bots = load_json(BOTS_JSON, [])
        return next((b for b in bots if b['id'] == bot_id), None)

    @staticmethod
    def process_bot_command(message: dict) -> Optional[dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–æ–≤"""
        content = message.get('content', '')
        if not content.startswith('/'):
            return None

        command = content.split()[0].lower()
        bots = load_json(BOTS_JSON, [])

        # –ü—Ä–æ—Å—Ç—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        bot_responses = {
            '/help': "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/help - –ø–æ–º–æ—â—å\n/time - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞\n/quote - —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞",
            '/time': f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}",
            '/stats': "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–ª–∞–π–Ω, 47 —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è",
            '/quote': "üí≠ ""–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é" - "–ë—Ä—ç–¥ –ö–æ–∫—Å",
            '/weather': "üå§Ô∏è –ü–æ–≥–æ–¥–∞: +20¬∞C, –æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏",
            '/joke': "üòÑ –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤! üêõ"
        }

        response_text = bot_responses.get(command)
        if response_text:
            return {
                "content": response_text,
                "author": "ü§ñ SafeGram Bot",
                "type": "bot"
            }

        return None

    @staticmethod
    def add_bot_to_server(bot_id: str, server_id: str, user_id: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞)
        server = ServerManager.get_server_by_id(server_id)
        if not server or server['owner_id'] != user_id:
            return False

        bots = load_json(BOTS_JSON, [])
        bot = next((b for b in bots if b['id'] == bot_id), None)

        if not bot or server_id in bot.get('servers', []):
            return False

        bot['servers'].append(server_id)
        save_json(BOTS_JSON, bots)

        log_event("bot_added", f"–ë–æ—Ç {bot['name']} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä {server['name']}", user_id)
        return True

# ========================================================================
# –°–ò–°–¢–ï–ú–ê –¢–ï–ú –û–§–û–†–ú–õ–ï–ù–ò–Ø
# ========================================================================

class ThemeManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""

    @staticmethod
    def create_custom_theme(name: str, colors: dict, creator_id: str) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã"""
        themes = load_json(THEMES_JSON, [])

        theme = {
            "id": generate_id("theme"),
            "name": name,
            "author": creator_id,
            "colors": colors,
            "created_at": time.time(),
            "downloads": 0,
            "rating": 5.0,
            "custom": True
        }

        themes.append(theme)
        save_json(THEMES_JSON, themes)

        log_event("theme_created", f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞: {name}", creator_id)
        return {"success": True, "theme": theme}

    @staticmethod
    def get_all_themes() -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º"""
        return load_json(THEMES_JSON, [])

    @staticmethod
    def get_theme_by_id(theme_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º—ã –ø–æ ID"""
        themes = load_json(THEMES_JSON, [])
        return next((t for t in themes if t['id'] == theme_id), None)

    @staticmethod
    def apply_user_theme(user_id: str, theme_id: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        theme = ThemeManager.get_theme_by_id(theme_id)
        if not theme:
            return False

        users = load_json(USERS_JSON, [])
        user = next((u for u in users if u['id'] == user_id), None)

        if not user:
            return False

        user['theme'] = theme_id
        save_json(USERS_JSON, users)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π —Ç–µ–º—ã
        themes = load_json(THEMES_JSON, [])
        theme_obj = next((t for t in themes if t['id'] == theme_id), None)
        if theme_obj:
            theme_obj['downloads'] = theme_obj.get('downloads', 0) + 1
            save_json(THEMES_JSON, themes)

        log_event("theme_applied", f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ç–µ–º–∞: {theme['name']}", user_id)
        return True

    @staticmethod
    def get_popular_themes(limit: int = 10) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º"""
        themes = load_json(THEMES_JSON, [])
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
        themes.sort(key=lambda x: x.get('downloads', 0), reverse=True)
        return themes[:limit]

# ========================================================================
# –°–ò–°–¢–ï–ú–ê –ú–û–î–ï–†–ê–¶–ò–ò
# ========================================================================

class ModerationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

    @staticmethod
    def report_content(reporter_id: str, content_type: str, content_id: str, reason: str) -> bool:
        """–ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç"""
        reports = load_json(REPORTS_JSON, [])

        report = {
            "id": generate_id("report"),
            "reporter_id": reporter_id,
            "content_type": content_type,  # message, user, server
            "content_id": content_id,
            "reason": reason,
            "status": "pending",  # pending, reviewed, resolved
            "created_at": time.time(),
            "moderator_id": None,
            "resolution": None
        }

        reports.append(report)
        save_json(REPORTS_JSON, reports)

        log_event("content_reported", f"–ü–æ–¥–∞–Ω–∞ –∂–∞–ª–æ–±–∞ –Ω–∞ {content_type}: {content_id}", reporter_id)
        return True

    @staticmethod
    def get_pending_reports() -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±"""
        reports = load_json(REPORTS_JSON, [])
        return [r for r in reports if r['status'] == 'pending']

    @staticmethod
    def moderate_report(report_id: str, moderator_id: str, resolution: str, action: str = None) -> bool:
        """–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"""
        reports = load_json(REPORTS_JSON, [])
        report = next((r for r in reports if r['id'] == report_id), None)

        if not report:
            return False

        report['status'] = 'resolved'
        report['moderator_id'] = moderator_id
        report['resolution'] = resolution
        report['resolved_at'] = time.time()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if action == 'delete_message' and report['content_type'] == 'message':
            MessageManager.delete_message(report['content_id'], moderator_id)
        elif action == 'ban_user' and report['content_type'] == 'user':
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pass

        save_json(REPORTS_JSON, reports)
        log_event("report_resolved", f"–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∂–∞–ª–æ–±–∞: {report_id}", moderator_id)
        return True

    @staticmethod
    def check_spam_content(content: str, user_id: str) -> dict:
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã —Å–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏–ª–∏ –ò–ò
        spam_keywords = ['—Å–ø–∞–º', '—Ä–µ–∫–ª–∞–º–∞', '–∫—É–ø–∏—Ç—å', '—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏—è']

        spam_score = 0
        for keyword in spam_keywords:
            if keyword in content.lower():
                spam_score += 1

        is_spam = spam_score >= 2

        return {
            "is_spam": is_spam,
            "confidence": min(spam_score * 0.3, 1.0),
            "keywords_found": spam_score
        }

print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–∏—Å—Ç–µ–º—ã —Ñ–∞–π–ª–æ–≤, –±–æ—Ç–æ–≤, —Ç–µ–º –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

# ========================================================================
# –£–¢–ò–õ–ò–¢–´
# ========================================================================

def create_directories():
    import os

    directories = [
        USERS_DIR,
        SERVERS_DIR,
        CHANNELS_DIR,
        MESSAGES_DIR,
        VOICE_DIR,
        THEMES_DIR,
        BOTS_DIR,
        LOGS_DIR,
        BACKUP_DIR,
        # –î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã
    ]

    for directory in directories:
        if directory is not None and isinstance(directory, (str, bytes, os.PathLike)):
            if not os.path.exists(directory):
                os.makedirs(directory, exist_ok=True)
        else:
            print(f"Warning: path {directory} is not set or invalid")

def save_json(filepath: str, data: Any) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON"""
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filepath}: {e}")
        return False

def generate_id(prefix: str = "") -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID"""
    timestamp = str(int(time.time() * 1000))[-8:]
    random_part = secrets.token_hex(6)
    return f"{prefix}{timestamp}{random_part}" if prefix else f"{timestamp}{random_part}"

def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    salt = secrets.token_hex(16)
    pwd_hash = hashlib.pbkdf2_hmac('sha256', password.encode(), salt.encode(), 100000)
    return f"{salt}${base64.b64encode(pwd_hash).decode()}"

def verify_password(password: str, hash_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    try:
        salt, pwd_hash = hash_str.split('$')
        expected_hash = hashlib.pbkdf2_hmac('sha256', password.encode(), salt.encode(), 100000)
        return base64.b64encode(expected_hash).decode() == pwd_hash
    except:
        return False

def log_error(message: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    print(f"‚ùå ERROR: {message}")

# ========================================================================
# –°–ò–°–¢–ï–ú–ê –î–†–£–ó–ï–ô –ò –ö–û–ù–¢–ê–ö–¢–û–í - –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø
# ========================================================================

class FriendsManager:
    """–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∑—å—è–º–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    
    @staticmethod
    def add_friend(user_id: str, friend_id: str) -> Dict:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞"""
        try:
            friends = load_json(FRIENDS_JSON, [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            users = load_json(USERS_JSON, [])
            user_exists = any(u['id'] == user_id for u in users)
            friend_exists = any(u['id'] == friend_id for u in users)
            
            if not user_exists or not friend_exists:
                return {"success": False, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            if user_id == friend_id:
                return {"success": False, "error": "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∏ –µ—â–µ –Ω–µ –¥—Ä—É–∑—å—è
            existing = next((f for f in friends if 
                           (f['user_id'] == user_id and f['friend_id'] == friend_id) or
                           (f['user_id'] == friend_id and f['friend_id'] == user_id)), None)
            
            if existing:
                return {"success": False, "error": "–£–∂–µ –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π"}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–∂–±—É (–≤–∑–∞–∏–º–Ω—É—é)
            friendship = {
                "id": generate_id("friend_"),
                "user_id": user_id,
                "friend_id": friend_id,
                "created_at": time.time(),
                "status": "active",
                "favorite": False
            }
            
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            reverse_friendship = {
                "id": generate_id("friend_"),
                "user_id": friend_id,
                "friend_id": user_id,
                "created_at": time.time(),
                "status": "active",
                "favorite": False
            }
            
            friends.extend([friendship, reverse_friendship])
            save_json(FRIENDS_JSON, friends)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            user_data = next(u for u in users if u['id'] == user_id)
            NotificationManager.send_notification(
                friend_id, 
                "–ù–æ–≤—ã–π –¥—Ä—É–≥!", 
                f"{user_data['username']} –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –¥—Ä—É–∑—å—è", 
                "friend_added"
            )
            
            return {"success": True, "friendship": friendship}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞: {e}")
            return {"success": False, "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞"}
    
    @staticmethod
    def remove_friend(user_id: str, friend_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞"""
        try:
            friends = load_json(FRIENDS_JSON, [])
            
            # –£–¥–∞–ª—è–µ–º –æ–±–µ –∑–∞–ø–∏—Å–∏ –¥—Ä—É–∂–±—ã
            friends = [f for f in friends if not (
                (f['user_id'] == user_id and f['friend_id'] == friend_id) or
                (f['user_id'] == friend_id and f['friend_id'] == user_id)
            )]
            
            save_json(FRIENDS_JSON, friends)
            return True
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞: {e}")
            return False
    
    @staticmethod
    def get_friends_list(user_id: str) -> List[Dict]:
        """–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            friends = load_json(FRIENDS_JSON, [])
            users = load_json(USERS_JSON, [])
            
            user_friends = [f for f in friends if f['user_id'] == user_id]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥—Ä—É–∑–µ–π
            friends_details = []
            for friendship in user_friends:
                friend_data = next((u for u in users if u['id'] == friendship['friend_id']), None)
                if friend_data:
                    friend_info = {
                        "id": friend_data['id'],
                        "username": friend_data['username'],
                        "avatar": friend_data.get('avatar', 'üë§'),
                        "status": friend_data.get('status', 'offline'),
                        "last_seen": friend_data.get('last_seen', 0),
                        "friendship_date": friendship['created_at'],
                        "favorite": friendship.get('favorite', False)
                    }
                    friends_details.append(friend_info)
            
            return friends_details
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π: {e}")
            return []
    
    @staticmethod
    def send_friend_request(from_user: str, to_user: str, message: str = "") -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            users = load_json(USERS_JSON, [])
            notifications = load_json(NOTIFICATIONS_JSON, [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            from_user_data = next((u for u in users if u['id'] == from_user), None)
            to_user_data = next((u for u in users if u['id'] == to_user), None)
            
            if not from_user_data or not to_user_data:
                return {"success": False, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            request_data = {
                "id": generate_id("freq_"),
                "from_user": from_user,
                "to_user": to_user,
                "message": message,
                "created_at": time.time(),
                "status": "pending"
            }
            
            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = {
                "id": generate_id("notif_"),
                "user_id": to_user,
                "type": "friend_request",
                "title": "–ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è",
                "message": f"{from_user_data['username']} —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –¥—Ä—É–∑—å—è",
                "data": request_data,
                "created_at": time.time(),
                "read": False
            }
            
            notifications.append(notification)
            save_json(NOTIFICATIONS_JSON, notifications)
            
            return {"success": True, "request": request_data}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è: {e}")
            return {"success": False, "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞"}
    
    @staticmethod
    def get_friend_requests(user_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è"""
        try:
            notifications = load_json(NOTIFICATIONS_JSON, [])
            users = load_json(USERS_JSON, [])
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è
            requests = [n for n in notifications if 
                       n['user_id'] == user_id and 
                       n['type'] == 'friend_request' and 
                       not n.get('read', False)]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è—Ö
            for request in requests:
                from_user_id = request['data']['from_user']
                from_user_data = next((u for u in users if u['id'] == from_user_id), None)
                if from_user_data:
                    request['from_user_info'] = {
                        "id": from_user_data['id'],
                        "username": from_user_data['username'],
                        "avatar": from_user_data.get('avatar', 'üë§')
                    }
            
            return requests
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è: {e}")
            return []
    
    @staticmethod
    def accept_friend_request(user_id: str, request_id: str) -> Dict:
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è"""
        try:
            notifications = load_json(NOTIFICATIONS_JSON, [])
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É
            request = next((n for n in notifications if n['id'] == request_id), None)
            if not request or request['user_id'] != user_id:
                return {"success": False, "error": "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            from_user_id = request['data']['from_user']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥—Ä—É–∑—å—è
            result = FriendsManager.add_friend(user_id, from_user_id)
            
            if result['success']:
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é
                for notification in notifications:
                    if notification['id'] == request_id:
                        notification['read'] = True
                        break
                
                save_json(NOTIFICATIONS_JSON, notifications)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
                users = load_json(USERS_JSON, [])
                user_data = next(u for u in users if u['id'] == user_id)
                NotificationManager.send_notification(
                    from_user_id,
                    "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!",
                    f"{user_data['username']} –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è",
                    "friend_accepted"
                )
            
            return result
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return {"success": False, "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞"}

# ========================================================================
# –ì–û–õ–û–°–û–í–´–ï –ö–ê–ù–ê–õ–´ –ò –ó–í–û–ù–ö–ò - –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø
# ========================================================================

class VoiceManager:
    """–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –∑–≤–æ–Ω–∫–æ–≤"""
    
    active_calls = {}
    voice_channels = {}
    screen_shares = {}
    
    @staticmethod
    def create_voice_room(channel_id: str, creator_id: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã"""
        try:
            voice_sessions = load_json(VOICE_SESSIONS_JSON, {})
            
            room_data = {
                "id": generate_id("voice_"),
                "channel_id": channel_id,
                "creator_id": creator_id,
                "created_at": time.time(),
                "participants": [creator_id],
                "settings": {
                    "max_participants": 50,
                    "push_to_talk": False,
                    "noise_suppression": True,
                    "echo_cancellation": True,
                    "bitrate": 64000
                },
                "status": "active"
            }
            
            voice_sessions[room_data['id']] = room_data
            VoiceManager.voice_channels[room_data['id']] = room_data
            
            save_json(VOICE_SESSIONS_JSON, voice_sessions)
            
            return {"success": True, "room": room_data}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã: {e}")
            return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"}
    
    @staticmethod
    def join_voice_channel(user_id: str, channel_id: str) -> Dict:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É"""
        try:
            voice_sessions = load_json(VOICE_SESSIONS_JSON, {})
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            room = None
            for room_id, room_data in voice_sessions.items():
                if room_data['channel_id'] == channel_id and room_data['status'] == 'active':
                    room = room_data
                    break
            
            if not room:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
                result = VoiceManager.create_voice_room(channel_id, user_id)
                if result['success']:
                    return result
                else:
                    return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if len(room['participants']) >= room['settings']['max_participants']:
                return {"success": False, "error": "–ö–æ–º–Ω–∞—Ç–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞"}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in room['participants']:
                room['participants'].append(user_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –∏ –Ω–∞ –¥–∏—Å–∫–µ
                voice_sessions[room['id']] = room
                VoiceManager.voice_channels[room['id']] = room
                save_json(VOICE_SESSIONS_JSON, voice_sessions)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                VoiceManager._notify_participants(room['id'], {
                    "type": "user_joined",
                    "user_id": user_id,
                    "participants_count": len(room['participants'])
                })
            
            return {"success": True, "room": room}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"}
    
    @staticmethod
    def leave_voice_channel(user_id: str, room_id: str) -> Dict:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            voice_sessions = load_json(VOICE_SESSIONS_JSON, {})
            
            if room_id not in voice_sessions:
                return {"success": False, "error": "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            room = voice_sessions[room_id]
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in room['participants']:
                room['participants'].remove(user_id)
                
                # –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
                if not room['participants']:
                    room['status'] = 'closed'
                    if room_id in VoiceManager.voice_channels:
                        del VoiceManager.voice_channels[room_id]
                else:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    VoiceManager._notify_participants(room_id, {
                        "type": "user_left",
                        "user_id": user_id,
                        "participants_count": len(room['participants'])
                    })
                
                voice_sessions[room_id] = room
                save_json(VOICE_SESSIONS_JSON, voice_sessions)
            
            return {"success": True}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è"}
    
    @staticmethod
    def start_screen_share(user_id: str, room_id: str) -> Dict:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞"""
        try:
            if room_id not in VoiceManager.voice_channels:
                return {"success": False, "error": "–ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            room = VoiceManager.voice_channels[room_id]
            
            if user_id not in room['participants']:
                return {"success": False, "error": "–í—ã –Ω–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–∫—Ä–∞–Ω –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç
            if room_id in VoiceManager.screen_shares:
                current_presenter = VoiceManager.screen_shares[room_id]['presenter_id']
                if current_presenter != user_id:
                    return {"success": False, "error": "–≠–∫—Ä–∞–Ω —É–∂–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è"}
            
            # –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
            share_data = {
                "presenter_id": user_id,
                "started_at": time.time(),
                "quality": "high",
                "audio_included": True
            }
            
            VoiceManager.screen_shares[room_id] = share_data
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            VoiceManager._notify_participants(room_id, {
                "type": "screen_share_started",
                "presenter_id": user_id
            })
            
            return {"success": True, "share_data": share_data}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"}
    
    @staticmethod
    def stop_screen_share(user_id: str, room_id: str) -> Dict:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞"""
        try:
            if room_id not in VoiceManager.screen_shares:
                return {"success": False, "error": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"}
            
            share_data = VoiceManager.screen_shares[room_id]
            
            if share_data['presenter_id'] != user_id:
                return {"success": False, "error": "–í—ã –Ω–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ —ç–∫—Ä–∞–Ω"}
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
            del VoiceManager.screen_shares[room_id]
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            VoiceManager._notify_participants(room_id, {
                "type": "screen_share_stopped",
                "presenter_id": user_id
            })
            
            return {"success": True}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"}
    
    @staticmethod
    def toggle_mute(user_id: str, room_id: str, muted: bool = None) -> Dict:
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        try:
            if room_id not in VoiceManager.voice_channels:
                return {"success": False, "error": "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            room = VoiceManager.voice_channels[room_id]
            
            if user_id not in room['participants']:
                return {"success": False, "error": "–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ"}
            
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—ã–ª–æ –±—ã –≤ WebRTC)
            if 'audio_states' not in room:
                room['audio_states'] = {}
            
            if muted is None:
                current_state = room['audio_states'].get(user_id, False)
                muted = not current_state
            
            room['audio_states'][user_id] = muted
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            VoiceManager._notify_participants(room_id, {
                "type": "user_audio_changed",
                "user_id": user_id,
                "muted": muted
            })
            
            return {"success": True, "muted": muted}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"}
    
    @staticmethod
    def get_voice_channel_info(channel_id: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ"""
        try:
            voice_sessions = load_json(VOICE_SESSIONS_JSON, {})
            
            # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –∫–∞–Ω–∞–ª–∞
            for room_id, room_data in voice_sessions.items():
                if (room_data['channel_id'] == channel_id and 
                    room_data['status'] == 'active'):
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
                    users = load_json(USERS_JSON, [])
                    participants_info = []
                    
                    for participant_id in room_data['participants']:
                        user_data = next((u for u in users if u['id'] == participant_id), None)
                        if user_data:
                            participants_info.append({
                                "id": user_data['id'],
                                "username": user_data['username'],
                                "avatar": user_data.get('avatar', 'üë§'),
                                "muted": room_data.get('audio_states', {}).get(participant_id, False)
                            })
                    
                    room_info = room_data.copy()
                    room_info['participants_info'] = participants_info
                    room_info['screen_share'] = VoiceManager.screen_shares.get(room_id)
                    
                    return {"success": True, "room": room_info}
            
            return {"success": False, "error": "–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"}
    
    @staticmethod
    def _notify_participants(room_id: str, message: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã (WebSocket –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)"""
        try:
            if room_id in VoiceManager.voice_channels:
                room = VoiceManager.voice_channels[room_id]
                for participant_id in room['participants']:
                    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã WebSocket
                    print(f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {participant_id}: {message}")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")

# ========================================================================
# –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –§–ê–ô–õ–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê - –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø
# ========================================================================

class FileManager:
    """–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏"""
    
    ALLOWED_EXTENSIONS = {
        'image': ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg', '.bmp'],
        'video': ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.flv'],
        'audio': ['.mp3', '.wav', '.ogg', '.m4a', '.flac', '.aac'],
        'document': ['.pdf', '.doc', '.docx', '.txt', '.rtf', '.odt'],
        'archive': ['.zip', '.rar', '.7z', '.tar', '.gz'],
        'code': ['.py', '.js', '.html', '.css', '.json', '.xml']
    }
    
    @staticmethod
    def upload_file(user_id: str, file, channel_id: str, description: str = "") -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
        try:
            if not file:
                return {"success": False, "error": "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"}
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            filename = file.filename
            if not filename:
                return {"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            file_ext = os.path.splitext(filename.lower())[1]
            file_type = FileManager._get_file_type(file_ext)
            
            if not file_type:
                return {"success": False, "error": "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            file_size = len(file.read())
            file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
            
            if file_size > MAX_FILE_SIZE:
                return {"success": False, "error": f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º {MAX_FILE_SIZE//1024//1024}MB)"}
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            file_id = generate_id("file_")
            safe_filename = f"{file_id}_{filename}"
            file_path = os.path.join(UPLOAD_DIR, safe_filename)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            file.save(file_path)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
            file_storage = load_json(FILE_STORAGE_JSON, [])
            
            file_record = {
                "id": file_id,
                "filename": filename,
                "safe_filename": safe_filename,
                "file_path": file_path,
                "file_type": file_type,
                "file_size": file_size,
                "mime_type": mimetypes.guess_type(filename)[0],
                "uploader_id": user_id,
                "channel_id": channel_id,
                "description": description,
                "upload_time": time.time(),
                "downloads": 0,
                "virus_scan_status": "pending",
                "public": True,
                "shared_with": []
            }
            
            file_storage.append(file_record)
            save_json(FILE_STORAGE_JSON, file_storage)
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –≤–∏—Ä—É—Å—ã (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            threading.Thread(
                target=FileManager._scan_file_async, 
                args=(file_id, file_path)
            ).start()
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if file_type == 'image':
                FileManager._create_thumbnail(file_id, file_path)
            
            return {"success": True, "file": file_record}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"}
    
    @staticmethod
    def create_folder(user_id: str, folder_name: str, parent_folder: str = None) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤"""
        try:
            file_storage = load_json(FILE_STORAGE_JSON, [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –ø–∞–ø–∫–∏
            if not folder_name or len(folder_name.strip()) < 1:
                return {"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–∞–ø–∫–∏"}
            
            folder_name = folder_name.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            existing = next((f for f in file_storage if 
                           f.get('type') == 'folder' and 
                           f['filename'] == folder_name and 
                           f['uploader_id'] == user_id and
                           f.get('parent_folder') == parent_folder), None)
            
            if existing:
                return {"success": False, "error": "–ü–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–∞–ø–∫–∏
            folder_record = {
                "id": generate_id("folder_"),
                "filename": folder_name,
                "type": "folder",
                "uploader_id": user_id,
                "parent_folder": parent_folder,
                "created_at": time.time(),
                "files_count": 0,
                "public": False,
                "shared_with": []
            }
            
            file_storage.append(folder_record)
            save_json(FILE_STORAGE_JSON, file_storage)
            
            return {"success": True, "folder": folder_record}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏"}
    
    @staticmethod
    def share_file(file_id: str, user_id: str, user_ids: List[str]) -> Dict:
        """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª–æ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            file_storage = load_json(FILE_STORAGE_JSON, [])
            
            # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª
            file_record = next((f for f in file_storage if f['id'] == file_id), None)
            if not file_record:
                return {"success": False, "error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
            if file_record['uploader_id'] != user_id and not file_record.get('public', False):
                return {"success": False, "error": "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ñ–∞–π–ª"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = load_json(USERS_JSON, [])
            valid_users = [uid for uid in user_ids if any(u['id'] == uid for u in users)]
            
            if not valid_users:
                return {"success": False, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–∞
            shared_with = file_record.get('shared_with', [])
            for uid in valid_users:
                if uid not in shared_with:
                    shared_with.append(uid)
            
            file_record['shared_with'] = shared_with
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            for i, f in enumerate(file_storage):
                if f['id'] == file_id:
                    file_storage[i] = file_record
                    break
            
            save_json(FILE_STORAGE_JSON, file_storage)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            uploader = next((u for u in users if u['id'] == user_id), None)
            uploader_name = uploader['username'] if uploader else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            
            for uid in valid_users:
                NotificationManager.send_notification(
                    uid,
                    "–ù–æ–≤—ã–π —Ñ–∞–π–ª",
                    f"{uploader_name} –ø–æ–¥–µ–ª–∏–ª—Å—è —Ñ–∞–π–ª–æ–º: {file_record['filename']}",
                    "file_shared"
                )
            
            return {"success": True, "shared_with": valid_users}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∞—Ä–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∞—Ä–∏–≤–∞–Ω–∏—è"}
    
    @staticmethod
    def get_file_preview(file_id: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª–∞"""
        try:
            file_storage = load_json(FILE_STORAGE_JSON, [])
            file_record = next((f for f in file_storage if f['id'] == file_id), None)
            
            if not file_record:
                return None
            
            file_type = file_record['file_type']
            file_path = file_record['file_path']
            
            if file_type == 'image':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ –ø—Ä–µ–≤—å—é
                thumbnail_path = os.path.join(UPLOAD_DIR, f"thumb_{file_id}.jpg")
                if os.path.exists(thumbnail_path):
                    return thumbnail_path
                return file_path
            
            elif file_type == 'text' or file_type == 'code':
                # –ß–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        preview = f.read(500)
                    return preview + "..." if len(preview) == 500 else preview
                except:
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª"
            
            elif file_type == 'document':
                return f"–î–æ–∫—É–º–µ–Ω—Ç: {file_record['filename']}"
            
            else:
                return f"–§–∞–π–ª: {file_record['filename']}"
                
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é: {e}")
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é"
    
    @staticmethod
    def get_user_files(user_id: str, folder_id: str = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            file_storage = load_json(FILE_STORAGE_JSON, [])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_files = [f for f in file_storage if 
                         (f['uploader_id'] == user_id or 
                          user_id in f.get('shared_with', [])) and
                         f.get('parent_folder') == folder_id]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É (–ø–∞–ø–∫–∏ —Å–Ω–∞—á–∞–ª–∞) –∏ –¥–∞—Ç–µ
            user_files.sort(key=lambda x: (
                x.get('type', 'file') != 'folder',
                -x.get('upload_time', x.get('created_at', 0))
            ))
            
            return user_files
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
            return []
    
    @staticmethod
    def delete_file(file_id: str, user_id: str) -> Dict:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            file_storage = load_json(FILE_STORAGE_JSON, [])
            
            # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª
            file_record = next((f for f in file_storage if f['id'] == file_id), None)
            if not file_record:
                return {"success": False, "error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
            if file_record['uploader_id'] != user_id:
                return {"success": False, "error": "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ"}
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
            try:
                if os.path.exists(file_record['file_path']):
                    os.remove(file_record['file_path'])
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –µ—Å—Ç—å
                thumbnail_path = os.path.join(UPLOAD_DIR, f"thumb_{file_id}.jpg")
                if os.path.exists(thumbnail_path):
                    os.remove(thumbnail_path)
            except:
                pass
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            file_storage = [f for f in file_storage if f['id'] != file_id]
            save_json(FILE_STORAGE_JSON, file_storage)
            
            return {"success": True}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è"}
    
    @staticmethod
    def _get_file_type(extension: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
        for file_type, extensions in FileManager.ALLOWED_EXTENSIONS.items():
            if extension in extensions:
                return file_type
        return None
    
    @staticmethod
    def _scan_file_async(file_id: str, file_path: str):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ –≤–∏—Ä—É—Å—ã"""
        try:
            # –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω—Ç–∏–≤–∏—Ä—É—Å
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            time.sleep(2)
            
            file_storage = load_json(FILE_STORAGE_JSON, [])
            
            for file_record in file_storage:
                if file_record['id'] == file_id:
                    file_record['virus_scan_status'] = 'clean'
                    file_record['scan_time'] = time.time()
                    break
            
            save_json(FILE_STORAGE_JSON, file_storage)
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    
    @staticmethod
    def _create_thumbnail(file_id: str, file_path: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            # –ó–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            thumbnail_path = os.path.join(UPLOAD_DIR, f"thumb_{file_id}.jpg")
            shutil.copy2(file_path, thumbnail_path)
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é: {e}")

# ========================================================================
# –°–ò–°–¢–ï–ú–ê –ë–û–¢–û–í –ò –ü–õ–ê–ì–ò–ù–û–í - –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø
# ========================================================================

class BotManager:
    """–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏"""
    
    registered_bots = {}
    
    @staticmethod
    def create_bot(owner_id: str, bot_name: str, description: str, avatar: str = "ü§ñ") -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞"""
        try:
            bots = load_json(BOTS_JSON, [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è
            if not bot_name or len(bot_name.strip()) < 3:
                return {"success": False, "error": "–ò–º—è –±–æ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤"}
            
            bot_name = bot_name.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            existing = next((b for b in bots if b['name'].lower() == bot_name.lower()), None)
            if existing:
                return {"success": False, "error": "–ë–æ—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            bot_data = {
                "id": generate_id("bot_"),
                "name": bot_name,
                "description": description,
                "avatar": avatar,
                "owner_id": owner_id,
                "created_at": time.time(),
                "status": "offline",
                "commands": [],
                "plugins": [],
                "permissions": {
                    "read_messages": True,
                    "send_messages": True,
                    "mention_everyone": False,
                    "manage_channels": False,
                    "kick_members": False,
                    "ban_members": False
                },
                "settings": {
                    "prefix": "/",
                    "auto_response": True,
                    "learning_mode": False,
                    "language": "ru"
                },
                "statistics": {
                    "commands_executed": 0,
                    "messages_sent": 0,
                    "uptime": 0
                }
            }
            
            bots.append(bot_data)
            save_json(BOTS_JSON, bots)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –ø–∞–º—è—Ç–∏
            BotManager.registered_bots[bot_data['id']] = bot_data
            
            return {"success": True, "bot": bot_data}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞"}
    
    @staticmethod
    def install_plugin(bot_id: str, owner_id: str, plugin_code: str, plugin_name: str) -> Dict:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è –±–æ—Ç–∞"""
        try:
            bots = load_json(BOTS_JSON, [])
            
            # –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞
            bot = next((b for b in bots if b['id'] == bot_id), None)
            if not bot:
                return {"success": False, "error": "–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
            if bot['owner_id'] != owner_id:
                return {"success": False, "error": "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –±–æ—Ç–∞"}
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≥–∏–Ω
            plugin = {
                "id": generate_id("plugin_"),
                "name": plugin_name,
                "code": plugin_code,
                "installed_at": time.time(),
                "enabled": True,
                "version": "1.0.0"
            }
            
            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ (–æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
            if 'def ' not in plugin_code:
                return {"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –ø–ª–∞–≥–∏–Ω–∞"}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≥–∏–Ω
            bot['plugins'].append(plugin)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
            for i, b in enumerate(bots):
                if b['id'] == bot_id:
                    bots[i] = bot
                    break
            
            save_json(BOTS_JSON, bots)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            if bot_id in BotManager.registered_bots:
                BotManager.registered_bots[bot_id] = bot
            
            return {"success": True, "plugin": plugin}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞"}
    
    @staticmethod
    def add_command(bot_id: str, owner_id: str, command_name: str, command_code: str, description: str = "") -> Dict:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É"""
        try:
            bots = load_json(BOTS_JSON, [])
            
            # –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞
            bot = next((b for b in bots if b['id'] == bot_id), None)
            if not bot:
                return {"success": False, "error": "–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
            if bot['owner_id'] != owner_id:
                return {"success": False, "error": "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –±–æ—Ç–∞"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã
            if not command_name or not command_name.startswith('/'):
                return {"success": False, "error": "–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å /"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            existing = next((c for c in bot['commands'] if c['name'] == command_name), None)
            if existing:
                return {"success": False, "error": "–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            command = {
                "id": generate_id("cmd_"),
                "name": command_name,
                "code": command_code,
                "description": description,
                "created_at": time.time(),
                "usage_count": 0,
                "enabled": True
            }
            
            bot['commands'].append(command)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
            for i, b in enumerate(bots):
                if b['id'] == bot_id:
                    bots[i] = bot
                    break
            
            save_json(BOTS_JSON, bots)
            
            return {"success": True, "command": command}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"}
    
    @staticmethod
    def process_bot_command(message: str, channel_id: str, user_id: str) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        try:
            if not message.startswith('/'):
                return None
            
            parts = message.split(' ', 1)
            command = parts[0]
            args = parts[1] if len(parts) > 1 else ""
            
            # –ò—â–µ–º –±–æ—Ç–∞ —Å —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π
            bots = load_json(BOTS_JSON, [])
            
            for bot in bots:
                if bot['status'] != 'online':
                    continue
                
                # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É
                bot_command = next((c for c in bot['commands'] 
                                  if c['name'] == command and c['enabled']), None)
                
                if bot_command:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                    response = BotManager._execute_command(bot, bot_command, args, user_id)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    bot_command['usage_count'] += 1
                    bot['statistics']['commands_executed'] += 1
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    for i, b in enumerate(bots):
                        if b['id'] == bot['id']:
                            bots[i] = bot
                            break
                    save_json(BOTS_JSON, bots)
                    
                    return response
            
            return None
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"
    
    @staticmethod
    def _execute_command(bot: Dict, command: Dict, args: str, user_id: str) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        try:
            command_name = command['name']
            
            # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if command_name == '/help':
                commands_list = "\n".join([f"{c['name']} - {c.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}" 
                                         for c in bot['commands'] if c['enabled']])
                return f"ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ {bot['name']}:\n{commands_list}"
            
            elif command_name == '/time':
                return f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
            
            elif command_name == '/weather':
                city = args if args else "–ú–æ—Å–∫–≤–∞"
                return WeatherBot.get_weather(city)
            
            elif command_name == '/translate':
                parts = args.split(' ', 1)
                if len(parts) < 2:
                    return "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /translate <—è–∑—ã–∫> <—Ç–µ–∫—Å—Ç>"
                
                target_lang = parts[0]
                text = parts[1]
                return TranslatorBot.translate_text(text, target_lang)
            
            elif command_name == '/random':
                import random
                if args:
                    try:
                        max_num = int(args)
                        return f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {random.randint(1, max_num)}"
                    except:
                        return "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: /random 100"
                return f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {random.randint(1, 100)}"
            
            else:
                # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–¥ (–û–ü–ê–°–ù–û –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!)
                # –í production –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Å–æ—á–Ω–∏—Ü–∞
                return "ü§ñ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
                
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {command['name']}: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"
    
    @staticmethod
    def toggle_bot_status(bot_id: str, owner_id: str, status: str) -> Dict:
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞"""
        try:
            bots = load_json(BOTS_JSON, [])
            
            # –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞
            bot = next((b for b in bots if b['id'] == bot_id), None)
            if not bot:
                return {"success": False, "error": "–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
            if bot['owner_id'] != owner_id:
                return {"success": False, "error": "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –±–æ—Ç–∞"}
            
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
            old_status = bot['status']
            bot['status'] = status
            
            if status == 'online' and old_status != 'online':
                bot['last_started'] = time.time()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
            for i, b in enumerate(bots):
                if b['id'] == bot_id:
                    bots[i] = bot
                    break
            
            save_json(BOTS_JSON, bots)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            BotManager.registered_bots[bot_id] = bot
            
            return {"success": True, "status": status}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"}

class WeatherBot:
    """–ë–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã"""
    
    @staticmethod
    def get_weather(city: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã (–∑–∞–≥–ª—É—à–∫–∞)"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å –∫ –ø–æ–≥–æ–¥–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É
            import random
            
            temperatures = [-10, -5, 0, 5, 10, 15, 20, 25, 30]
            conditions = ["‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω–æ", "‚õÖ –û–±–ª–∞—á–Ω–æ", "üåßÔ∏è –î–æ–∂–¥—å", "‚ùÑÔ∏è –°–Ω–µ–≥", "üå´Ô∏è –¢—É–º–∞–Ω"]
            
            temp = random.choice(temperatures)
            condition = random.choice(conditions)
            
            return f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city}:\n{condition}\nüå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C"
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É"

class TranslatorBot:
    """–ë–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞"""
    
    # –ü—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    TRANSLATIONS = {
        'en': {
            '–ø—Ä–∏–≤–µ—Ç': 'hello',
            '–∫–∞–∫ –¥–µ–ª–∞': 'how are you',
            '—Å–ø–∞—Å–∏–±–æ': 'thank you',
            '–ø–æ–∫–∞': 'bye'
        },
        'es': {
            '–ø—Ä–∏–≤–µ—Ç': 'hola',
            '–∫–∞–∫ –¥–µ–ª–∞': 'como estas',
            '—Å–ø–∞—Å–∏–±–æ': 'gracias',
            '–ø–æ–∫–∞': 'adios'
        }
    }
    
    @staticmethod
    def translate_text(text: str, target_lang: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        try:
            text_lower = text.lower()
            
            if target_lang in TranslatorBot.TRANSLATIONS:
                translations = TranslatorBot.TRANSLATIONS[target_lang]
                
                for ru_phrase, translation in translations.items():
                    if ru_phrase in text_lower:
                        return f"üåê –ü–µ—Ä–µ–≤–æ–¥: {translation}"
            
            return f"üåê –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_lang}: {text} (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Google Translate API)"
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"

# ========================================================================
# –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô - –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø
# ========================================================================

class NotificationManager:
    """–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    notification_channels = {}
    
    @staticmethod
    def send_notification(user_id: str, title: str, message: str, notification_type: str, data: Dict = None) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            notifications = load_json(NOTIFICATIONS_JSON, [])
            
            notification = {
                "id": generate_id("notif_"),
                "user_id": user_id,
                "title": title,
                "message": message,
                "type": notification_type,
                "data": data or {},
                "created_at": time.time(),
                "read": False,
                "priority": NotificationManager._get_priority(notification_type),
                "actions": NotificationManager._get_actions(notification_type)
            }
            
            notifications.append(notification)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_notifications = [n for n in notifications if n['user_id'] == user_id]
            if len(user_notifications) > 100:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                old_read = [n for n in user_notifications if n['read']]
                old_read.sort(key=lambda x: x['created_at'])
                
                for old_notif in old_read[:50]:  # –£–¥–∞–ª—è–µ–º 50 —Å—Ç–∞—Ä—ã—Ö
                    notifications = [n for n in notifications if n['id'] != old_notif['id']]
            
            save_json(NOTIFICATIONS_JSON, notifications)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
            NotificationManager._send_push_notification(user_id, notification)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω
            NotificationManager._send_websocket_notification(user_id, notification)
            
            return {"success": True, "notification": notification}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"}
    
    @staticmethod
    def get_user_notifications(user_id: str, limit: int = 50, unread_only: bool = False) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            notifications = load_json(NOTIFICATIONS_JSON, [])
            
            user_notifications = [n for n in notifications if n['user_id'] == user_id]
            
            if unread_only:
                user_notifications = [n for n in user_notifications if not n['read']]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –≤—Ä–µ–º–µ–Ω–∏
            user_notifications.sort(key=lambda x: (-x['priority'], -x['created_at']))
            
            return user_notifications[:limit]
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return []
    
    @staticmethod
    def mark_as_read(notification_id: str, user_id: str) -> Dict:
        """–ü–æ–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
        try:
            notifications = load_json(NOTIFICATIONS_JSON, [])
            
            for notification in notifications:
                if (notification['id'] == notification_id and 
                    notification['user_id'] == user_id):
                    notification['read'] = True
                    notification['read_at'] = time.time()
                    break
            else:
                return {"success": False, "error": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
            
            save_json(NOTIFICATIONS_JSON, notifications)
            return {"success": True}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}
    
    @staticmethod
    def mark_all_as_read(user_id: str) -> Dict:
        """–ü–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"""
        try:
            notifications = load_json(NOTIFICATIONS_JSON, [])
            current_time = time.time()
            
            count = 0
            for notification in notifications:
                if (notification['user_id'] == user_id and 
                    not notification['read']):
                    notification['read'] = True
                    notification['read_at'] = current_time
                    count += 1
            
            save_json(NOTIFICATIONS_JSON, notifications)
            return {"success": True, "marked_count": count}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}
    
    @staticmethod
    def delete_notification(notification_id: str, user_id: str) -> Dict:
        """–£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            notifications = load_json(NOTIFICATIONS_JSON, [])
            
            notifications = [n for n in notifications if not (
                n['id'] == notification_id and n['user_id'] == user_id
            )]
            
            save_json(NOTIFICATIONS_JSON, notifications)
            return {"success": True}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è"}
    
    @staticmethod
    def subscribe_to_notifications(user_id: str, channel: str, subscription_data: Dict) -> Dict:
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            if channel not in NotificationManager.notification_channels:
                NotificationManager.notification_channels[channel] = {}
            
            NotificationManager.notification_channels[channel][user_id] = {
                "subscribed_at": time.time(),
                "settings": subscription_data
            }
            
            return {"success": True}
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return {"success": False, "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"}
    
    @staticmethod
    def _get_priority(notification_type: str) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        priorities = {
            "system": 10,
            "security": 9,
            "friend_request": 7,
            "friend_accepted": 6,
            "message": 5,
            "file_shared": 4,
            "server_invite": 3,
            "achievement": 2,
            "general": 1
        }
        return priorities.get(notification_type, 1)
    
    @staticmethod
    def _get_actions(notification_type: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        actions = {
            "friend_request": [
                {"id": "accept", "text": "–ü—Ä–∏–Ω—è—Ç—å", "type": "success"},
                {"id": "decline", "text": "–û—Ç–∫–ª–æ–Ω–∏—Ç—å", "type": "danger"}
            ],
            "server_invite": [
                {"id": "join", "text": "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", "type": "success"},
                {"id": "decline", "text": "–û—Ç–∫–ª–æ–Ω–∏—Ç—å", "type": "secondary"}
            ]
        }
        return actions.get(notification_type, [])
    
    @staticmethod
    def _send_push_notification(user_id: str, notification: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –ó–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ Firebase Cloud Messaging
            print(f"üì± Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {user_id}: {notification['title']}")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push: {e}")
    
    @staticmethod
    def _send_websocket_notification(user_id: str, notification: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket"""
        try:
            # –ó–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ WebSocket
            print(f"üîî WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {user_id}: {notification['title']}")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket: {e}")

# ========================================================================
# API –ú–ê–†–®–†–£–¢–´
# ========================================================================

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def require_auth(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    def wrapper(*args, **kwargs):
        user = SessionManager.get_current_user()
        if not user:
            return jsonify({"success": False, "error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"}), 401
        return f(user, *args, **kwargs)
    wrapper.__name__ = f.__name__
    return wrapper

def require_admin(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    def wrapper(*args, **kwargs):
        user = SessionManager.get_current_user()
        if not user or not user.get('is_admin', False):
            return jsonify({"success": False, "error": "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"}), 403
        return f(user, *args, **kwargs)
    wrapper.__name__ = f.__name__
    return wrapper

# ========================================================================
# API –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô
# ========================================================================

# API –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
@app.route('/api/voice/join/<channel_id>', methods=['POST'])
def api_join_voice(channel_id):
    """API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É"""
    data = request.get_json() or {}
    user_id = data.get('user_id')
    
    if not user_id:
        return jsonify({"success": False, "error": "User ID required"}), 400
    
    result = VoiceManager.join_voice_channel(user_id, channel_id)
    return jsonify(result)

@app.route('/api/voice/leave/<room_id>', methods=['POST'])
def api_leave_voice(room_id):
    """API –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    data = request.get_json() or {}
    user_id = data.get('user_id')
    
    if not user_id:
        return jsonify({"success": False, "error": "User ID required"}), 400
    
    result = VoiceManager.leave_voice_channel(user_id, room_id)
    return jsonify(result)

@app.route('/api/files/<file_id>/download')
def api_download_file(file_id):
    """API —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    try:
        file_storage = load_json(FILE_STORAGE_JSON, [])
        file_record = next((f for f in file_storage if f['id'] == file_id), None)
        
        if not file_record:
            return jsonify({"success": False, "error": "File not found"}), 404
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
        file_record['downloads'] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
        for i, f in enumerate(file_storage):
            if f['id'] == file_id:
                file_storage[i] = file_record
                break
        
        save_json(FILE_STORAGE_JSON, file_storage)
        
        return send_from_directory(
            UPLOAD_DIR,
            file_record['safe_filename'],
            as_attachment=True,
            download_name=file_record['filename']
        )
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return jsonify({"success": False, "error": "Download error"}), 500

# API –¥–ª—è –±–æ—Ç–æ–≤
@app.route('/api/bots', methods=['GET'])
def api_get_bots():
    """API –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤"""
    user_id = request.args.get('user_id')
    bots = load_json(BOTS_JSON, [])
    
    if user_id:
        # –¢–æ–ª—å–∫–æ –±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_bots = [b for b in bots if b['owner_id'] == user_id]
        return jsonify({"success": True, "bots": user_bots})
    else:
        # –í—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –±–æ—Ç—ã
        public_bots = [b for b in bots if b.get('public', True)]
        return jsonify({"success": True, "bots": public_bots})

@app.route('/api/bots/create', methods=['POST'])
def api_create_bot():
    """API —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞"""
    data = request.get_json() or {}
    owner_id = data.get('owner_id')
    bot_name = data.get('name', '')
    description = data.get('description', '')
    avatar = data.get('avatar', 'ü§ñ')
    
    if not owner_id or not bot_name:
        return jsonify({"success": False, "error": "Missing required fields"}), 400
    
    result = BotManager.create_bot(owner_id, bot_name, description, avatar)
    return jsonify(result)

# API –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@app.route('/api/notifications/<user_id>')
def api_get_notifications(user_id):
    """API –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    limit = int(request.args.get('limit', 50))
    unread_only = request.args.get('unread_only', 'false').lower() == 'true'
    
    notifications = NotificationManager.get_user_notifications(user_id, limit, unread_only)
    return jsonify({"success": True, "notifications": notifications})

@app.route('/api/notifications/<notification_id>/read', methods=['POST'])
def api_mark_notification_read(notification_id):
    """API –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ"""
    data = request.get_json() or {}
    user_id = data.get('user_id')
    
    if not user_id:
        return jsonify({"success": False, "error": "User ID required"}), 400
    
    result = NotificationManager.mark_as_read(notification_id, user_id)
    return jsonify(result)

# ========================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ –ò –•–ï–õ–ü–ï–†–´
# ========================================================================

def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB", "TB"]
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    return f"{s} {size_names[i]}"

def is_valid_email(email: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ email"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def sanitize_filename(filename: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    # –£–±–∏—Ä–∞–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(filename) > 255:
        name, ext = os.path.splitext(filename)
        filename = name[:255-len(ext)] + ext
    return filename

def generate_api_key(user_id: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –∫–ª—é—á–∞"""
    payload = f"{user_id}:{time.time()}:{secrets.token_hex(16)}"
    return base64.b64encode(payload.encode()).decode()

def validate_api_key(api_key: str) -> Optional[str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞"""
    try:
        payload = base64.b64decode(api_key).decode()
        parts = payload.split(':')
        if len(parts) != 3:
            return None
        
        user_id, timestamp, token = parts
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (24 —á–∞—Å–∞)
        if time.time() - float(timestamp) > 24 * 3600:
            return None
        
        return user_id
    except:
        return None


# ========================================================================
# –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø API
# ========================================================================

@app.route('/api/register', methods=['POST'])
def api_register():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = request.get_json() or {}

    username = data.get('username', '').strip()
    email = data.get('email', '').strip()
    password = data.get('password', '')

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not username or len(username) < 3:
        return jsonify({"success": False, "error": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤"})

    if not is_valid_email(email):
        return jsonify({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"})

    if len(password) < 6:
        return jsonify({"success": False, "error": "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤"})

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = UserManager.create_user(username, email, password)

    if result['success']:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_token = SessionManager.create_session(result['user']['id'])

        response = make_response(jsonify({"success": True, "user": result['user']}))
        response.set_cookie('session_token', session_token, 
                          max_age=30*24*3600, httponly=True, secure=False)
        return response

    return jsonify(result)

@app.route('/api/login', methods=['POST'])
def api_login():
    """–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = request.get_json() or {}

    email = data.get('email', '').strip()
    password = data.get('password', '')

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è –∞–¥–º–∏–Ω–∞
    if email == 'admin' and password == 'panel':
        admin_user = {"id": "admin", "username": "Admin", "email": "admin"}
        session_token = SessionManager.create_session("admin")

        response = make_response(jsonify({"success": True, "user": admin_user}))
        response.set_cookie('session_token', session_token, 
                          max_age=30*24*3600, httponly=True, secure=False)
        return response

    # –û–±—ã—á–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    user = UserManager.authenticate_user(email, password)

    if user:
        session_token = SessionManager.create_session(user['id'])

        # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
        user_response = user.copy()
        user_response.pop('password_hash', None)

        response = make_response(jsonify({"success": True, "user": user_response}))
        response.set_cookie('session_token', session_token, 
                          max_age=30*24*3600, httponly=True, secure=False)
        return response

    return jsonify({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"})

@app.route('/api/logout', methods=['POST'])
def api_logout():
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    session_token = request.cookies.get('session_token')
    if session_token:
        SessionManager.delete_session(session_token)

    response = make_response(jsonify({"success": True}))
    response.set_cookie('session_token', '', expires=0)
    return response

@app.route('/api/me')
@require_auth
def api_me(user):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_copy = user.copy()
    user_copy.pop('password_hash', None)
    return jsonify({"success": True, "user": user_copy})

# ========================================================================
# API –°–ï–†–í–ï–†–û–í –ò –ö–ê–ù–ê–õ–û–í
# ========================================================================

@app.route('/api/servers')
@require_auth
def api_get_servers(user):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    servers = ServerManager.get_user_servers(user['id'])
    return jsonify({"success": True, "servers": servers})

@app.route('/api/servers', methods=['POST'])
@require_auth
def api_create_server(user):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    data = request.get_json() or {}

    name = data.get('name', '').strip()
    description = data.get('description', '').strip()
    icon = data.get('icon', 'üè†')

    if not name or len(name) < 3:
        return jsonify({"success": False, "error": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤"})

    result = ServerManager.create_server(name, description, user['id'], icon)
    return jsonify(result)

@app.route('/api/servers/<server_id>/join', methods=['POST'])
@require_auth
def api_join_server(user, server_id):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
    success = ServerManager.join_server(server_id, user['id'])
    return jsonify({"success": success})

@app.route('/api/servers/<server_id>/leave', methods=['POST'])
@require_auth
def api_leave_server(user, server_id):
    """–ü–æ–∫–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    success = ServerManager.leave_server(server_id, user['id'])
    return jsonify({"success": success})

@app.route('/api/servers/<server_id>/channels')
@require_auth
def api_get_channels(user, server_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"""
    channels = ChannelManager.get_server_channels(server_id)
    return jsonify({"success": True, "channels": channels})

@app.route('/api/servers/<server_id>/channels', methods=['POST'])
@require_auth
def api_create_channel(user, server_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    data = request.get_json() or {}

    name = data.get('name', '').strip()
    channel_type = data.get('type', 'text')
    topic = data.get('topic', '').strip()

    if not name:
        return jsonify({"success": False, "error": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"})

    result = ChannelManager.create_channel(server_id, name, channel_type, topic, user['id'])
    return jsonify(result)

# ========================================================================
# API –°–û–û–ë–©–ï–ù–ò–ô
# ========================================================================

@app.route('/api/channels/<channel_id>/messages')
@require_auth
def api_get_messages(user, channel_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞"""
    limit = min(int(request.args.get('limit', 50)), 100)
    before = request.args.get('before')

    messages = MessageManager.get_channel_messages(channel_id, limit, before)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–∞—Ö
    users = load_json(USERS_JSON, [])
    user_map = {u['id']: u for u in users}

    for message in messages:
        author = user_map.get(message['author_id'])
        if author:
            message['author'] = {
                "id": author['id'],
                "username": author['username'],
                "avatar": author.get('avatar', 'üë§')
            }

    return jsonify({"success": True, "messages": messages})

@app.route('/api/channels/<channel_id>/messages', methods=['POST'])
@require_auth
def api_send_message(user, channel_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    data = request.get_json() or {}

    content = data.get('content', '').strip()
    reply_to = data.get('reply_to')

    if not content:
        return jsonify({"success": False, "error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–æ–≤
    if content.startswith('/'):
        bot_response = BotManager.process_bot_command({"content": content})
        if bot_response:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
            bot_message = MessageManager.send_message(
                channel_id, "system", bot_response['content'], "bot"
            )
            if bot_message['success']:
                return jsonify(bot_message)

    result = MessageManager.send_message(channel_id, user['id'], content, reply_to=reply_to)
    return jsonify(result)

@app.route('/api/messages/<message_id>', methods=['PATCH'])
@require_auth
def api_edit_message(user, message_id):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    data = request.get_json() or {}
    new_content = data.get('content', '').strip()

    if not new_content:
        return jsonify({"success": False, "error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"})

    success = MessageManager.edit_message(message_id, user['id'], new_content)
    return jsonify({"success": success})

@app.route('/api/messages/<message_id>', methods=['DELETE'])
@require_auth
def api_delete_message(user, message_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    success = MessageManager.delete_message(message_id, user['id'])
    return jsonify({"success": success})

@app.route('/api/messages/<message_id>/pin', methods=['POST'])
@require_auth
def api_pin_message(user, message_id):
    """–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    success = MessageManager.pin_message(message_id, user['id'])
    return jsonify({"success": success})

@app.route('/api/messages/<message_id>/react', methods=['POST'])
@require_auth
def api_add_reaction(user, message_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏"""
    data = request.get_json() or {}
    emoji = data.get('emoji', 'üëç')

    success = MessageManager.add_reaction(message_id, user['id'], emoji)
    return jsonify({"success": success})

@app.route('/api/search/messages')
@require_auth
def api_search_messages(user):
    """–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    query = request.args.get('q', '').strip()
    channel_id = request.args.get('channel_id')
    limit = min(int(request.args.get('limit', 50)), 100)

    if not query:
        return jsonify({"success": False, "error": "–ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"})

    messages = MessageManager.search_messages(query, channel_id, limit=limit)
    return jsonify({"success": True, "messages": messages})

# ========================================================================
# API –§–ê–ô–õ–û–í
# ========================================================================

@app.route('/api/upload', methods=['POST'])
@require_auth
def api_upload_file(user):
    if 'file' not in request.files:
        return jsonify(success=False, error="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"), 400
    file = request.files['file']
    channel_id = request.form.get('channel_id')
    result = FileManager.upload_file(file, user['id'], channel_id)
    return jsonify(result)

@app.route('/uploads/<path:filename>')
def uploaded_file(filename):
    """–û—Ç–¥–∞—á–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    return send_from_directory(UPLOAD_DIR, filename)

@app.route('/api/files/my')
@require_auth
def api_get_my_files(user):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    file_type = request.args.get('type')
    limit = min(int(request.args.get('limit', 50)), 100)

    files = FileManager.get_user_files(user['id'], file_type, limit)
    return jsonify({"success": True, "files": files})

# ========================================================================
# API –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ò –î–†–£–ó–ï–ô
# ========================================================================

@app.route('/api/users/search')
@require_auth
def api_search_users(user):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = request.args.get('q', '').strip().lower()
    limit = min(int(request.args.get('limit', 20)), 50)

    if not query or len(query) < 2:
        return jsonify({"success": False, "error": "–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤"})

    users = load_json(USERS_JSON, [])
    found_users = []

    for u in users:
        if (query in u.get('username', '').lower() or 
            query in u.get('email', '').lower()):
            user_info = {
                "id": u['id'],
                "username": u['username'],
                "avatar": u.get('avatar', 'üë§'),
                "status": u.get('status', 'offline')
            }
            found_users.append(user_info)

            if len(found_users) >= limit:
                break

    return jsonify({"success": True, "users": found_users})

@app.route('/api/friends')
@require_auth
def api_get_friends(user):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π"""
    users = load_json(USERS_JSON, [])
    user_map = {u['id']: u for u in users}

    friends = []
    for friend_id in user.get('friends', []):
        friend = user_map.get(friend_id)
        if friend:
            friends.append({
                "id": friend['id'],
                "username": friend['username'],
                "avatar": friend.get('avatar', 'üë§'),
                "status": friend.get('status', 'offline'),
                "last_seen": friend.get('last_seen', 0)
            })

    return jsonify({"success": True, "friends": friends})

@app.route('/api/friends/<friend_id>', methods=['POST'])
@require_auth
def api_add_friend(user, friend_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è"""
    success = UserManager.add_friend(user['id'], friend_id)
    return jsonify({"success": success})

@app.route('/api/friends/<friend_id>', methods=['DELETE'])
@require_auth
def api_remove_friend(user, friend_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–∑–µ–π"""
    success = UserManager.remove_friend(user['id'], friend_id)
    return jsonify({"success": success})

# ========================================================================
# API –¢–ï–ú –ò –ù–ê–°–¢–†–û–ï–ö
# ========================================================================

@app.route('/api/themes')
def api_get_themes():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–º"""
    themes = ThemeManager.get_all_themes()
    return jsonify({"success": True, "themes": themes})

@app.route('/api/themes/<theme_id>/apply', methods=['POST'])
@require_auth
def api_apply_theme(user, theme_id):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã"""
    success = ThemeManager.apply_user_theme(user['id'], theme_id)
    return jsonify({"success": success})

@app.route('/api/settings', methods=['GET'])
@require_auth
def api_get_user_settings(user):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return jsonify({"success": True, "settings": user.get('settings', {})})

@app.route('/api/settings', methods=['POST'])
@require_auth
def api_update_user_settings(user):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = request.get_json() or {}

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    allowed_settings = [
        'show_online_status', 'allow_friend_requests', 'allow_server_invites',
        'notifications', 'sound_notifications', 'email_notifications'
    ]

    updates = {}
    for key, value in data.items():
        if key in allowed_settings:
            if 'settings' not in updates:
                updates['settings'] = user.get('settings', {}).copy()
            updates['settings'][key] = value

    if updates:
        success = UserManager.update_user(user['id'], updates)
        return jsonify({"success": success})

    return jsonify({"success": False, "error": "–ù–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"})

# ========================================================================
# API –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–Ø
# ========================================================================

@app.route('/api/stats')
def api_get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    users = load_json(USERS_JSON, [])
    messages = load_json(MESSAGES_JSON, [])
    servers = load_json(SERVERS_JSON, [])
    channels = load_json(CHANNELS_JSON, [])
    online_users = UserManager.get_online_users()

    stats = {
        "users_total": len(users),
        "users_online": len(online_users),
        "messages_total": len(messages),
        "servers_total": len(servers),
        "channels_total": len(channels),
        "uptime_hours": (time.time() - load_json(STATS_JSON, {}).get('uptime_start', time.time())) / 3600
    }

    return jsonify({"success": True, "stats": stats})

@app.route('/api/admin/users')
@require_admin
def api_admin_get_users(user):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω)"""
    users = load_json(USERS_JSON, [])
    # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª–∏
    safe_users = []
    for u in users:
        safe_user = u.copy()
        safe_user.pop('password_hash', None)
        safe_users.append(safe_user)

    return jsonify({"success": True, "users": safe_users})

@app.route('/api/admin/reports')
@require_admin
def api_admin_get_reports(user):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∂–∞–ª–æ–± (–∞–¥–º–∏–Ω)"""
    reports = ModerationManager.get_pending_reports()
    return jsonify({"success": True, "reports": reports})

@app.route('/api/admin/logs')
@require_admin
def api_admin_get_logs(user):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ (–∞–¥–º–∏–Ω)"""
    limit = min(int(request.args.get('limit', 100)), 1000)
    logs = load_json(LOGS_JSON, [])

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    return jsonify({"success": True, "logs": logs[-limit:]})

print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã API –º–∞—Ä—à—Ä—É—Ç—ã")

# ========================================================================
# –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–° - –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê –ò –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
# ========================================================================

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ SafeGram 4.0 Ultimate Pro"""
    stats = load_json(STATS_JSON, {})
    user = SessionManager.get_current_user()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if user:
        return redirect('/app')

    return render_template_string("""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SafeGram 4.0 Ultimate Pro - –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±—É–¥—É—â–µ–≥–æ</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }

        :root {
            --primary: #0a0a0f;
            --secondary: #161620;
            --accent: #00d4ff;
            --success: #00ff88;
            --warning: #ffaa00;
            --danger: #ff4444;
            --text: #ffffff;
            --text-secondary: #b8b8c6;
            --border: #2a2a3a;
        }

        body {
            font-family: 'Segoe UI', -apple-system, BlinkMacSystemFont, system-ui, Arial, sans-serif;
            background: linear-gradient(135deg, var(--primary), var(--secondary), #0d1117);
            color: var(--text);
            line-height: 1.6;
            overflow-x: hidden;
        }

        /* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω */
        body::before {
            content: '';
            position: fixed;
            top: 0; left: 0; width: 100%; height: 100%;
            background: 
                radial-gradient(circle at 20% 20%, rgba(0, 212, 255, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 80%, rgba(0, 255, 136, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 40% 60%, rgba(255, 170, 0, 0.05) 0%, transparent 50%);
            animation: backgroundFloat 20s ease-in-out infinite alternate;
            z-index: -1;
        }

        @keyframes backgroundFloat {
            from { transform: translate(0, 0) rotate(0deg); }
            to { transform: translate(-30px, -30px) rotate(2deg); }
        }

        /* –ù–∞–≤–∏–≥–∞—Ü–∏—è */
        .navbar {
            position: fixed; top: 0; left: 0; right: 0; z-index: 1000;
            background: rgba(10, 10, 15, 0.95); backdrop-filter: blur(20px);
            border-bottom: 1px solid var(--border);
            padding: 1rem 2rem;
        }

        .nav-content {
            max-width: 1200px; margin: 0 auto;
            display: flex; justify-content: space-between; align-items: center;
        }

        .logo {
            font-size: 1.8rem; font-weight: 900; color: var(--accent);
            text-shadow: 0 0 20px rgba(0, 212, 255, 0.8);
            animation: logoGlow 3s ease-in-out infinite alternate;
        }

        @keyframes logoGlow {
            from { text-shadow: 0 0 10px rgba(0, 212, 255, 0.8); }
            to { text-shadow: 0 0 30px rgba(0, 212, 255, 1); }
        }

        .nav-links {
            display: flex; gap: 2rem; align-items: center;
        }

        .nav-links a {
            color: var(--text-secondary); text-decoration: none;
            transition: all 0.3s ease; font-weight: 500;
        }

        .nav-links a:hover {
            color: var(--accent); transform: translateY(-2px);
        }

        /* –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç */
        .hero {
            min-height: 100vh; display: flex; align-items: center;
            padding: 120px 2rem 2rem;
        }

        .hero-content {
            max-width: 1200px; margin: 0 auto; width: 100%;
            display: grid; grid-template-columns: 1fr 1fr; gap: 4rem;
            align-items: center;
        }

        .hero-text h1 {
            font-size: clamp(2.5rem, 5vw, 4rem);
            font-weight: 900; margin-bottom: 1.5rem;
            background: linear-gradient(45deg, var(--accent), var(--success), var(--warning));
            -webkit-background-clip: text; -webkit-text-fill-color: transparent;
            line-height: 1.2;
        }

        .hero-text p {
            font-size: 1.3rem; color: var(--text-secondary);
            margin-bottom: 2rem; line-height: 1.6;
        }

        .cta-buttons {
            display: flex; gap: 1.5rem; flex-wrap: wrap;
        }

        .btn {
            padding: 1rem 2rem; border: none; border-radius: 12px;
            font-size: 1.1rem; font-weight: 700; cursor: pointer;
            text-decoration: none; display: inline-flex;
            align-items: center; gap: 0.5rem; transition: all 0.3s ease;
            text-transform: uppercase; letter-spacing: 0.5px;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--accent), #0099cc);
            color: white; box-shadow: 0 8px 32px rgba(0, 212, 255, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 40px rgba(0, 212, 255, 0.5);
        }

        .btn-secondary {
            background: linear-gradient(135deg, var(--success), #00cc66);
            color: white; box-shadow: 0 8px 32px rgba(0, 255, 136, 0.3);
        }

        .btn-secondary:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 40px rgba(0, 255, 136, 0.5);
        }

        /* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */
        .hero-stats {
            display: grid; grid-template-columns: repeat(2, 1fr);
            gap: 2rem; margin-top: 3rem;
        }

        .stat-card {
            background: linear-gradient(135deg, rgba(255,255,255,0.05), rgba(255,255,255,0.02));
            border: 1px solid var(--border); border-radius: 16px;
            padding: 1.5rem; text-align: center;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            border-color: var(--accent);
            box-shadow: 0 10px 40px rgba(0, 212, 255, 0.2);
        }

        .stat-value {
            font-size: 2.5rem; font-weight: 900;
            color: var(--accent); margin-bottom: 0.5rem;
            animation: statPulse 3s ease-in-out infinite;
        }

        @keyframes statPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .stat-label {
            color: var(--text-secondary); font-weight: 600;
            text-transform: uppercase; font-size: 0.9rem;
        }

        /* –î–µ–º–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å */
        .hero-demo {
            position: relative;
        }

        .demo-window {
            background: linear-gradient(135deg, var(--secondary), rgba(22, 22, 32, 0.95));
            border: 1px solid var(--border); border-radius: 20px;
            padding: 1.5rem; box-shadow: 0 20px 60px rgba(0,0,0,0.4);
            backdrop-filter: blur(20px);
        }

        .demo-header {
            display: flex; align-items: center; gap: 0.5rem;
            margin-bottom: 1rem; padding-bottom: 0.5rem;
            border-bottom: 1px solid var(--border);
        }

        .demo-dot {
            width: 12px; height: 12px; border-radius: 50%;
        }
        .demo-dot:nth-child(1) { background: var(--danger); }
        .demo-dot:nth-child(2) { background: var(--warning); }
        .demo-dot:nth-child(3) { background: var(--success); }

        .demo-message {
            background: rgba(0, 212, 255, 0.1);
            border-left: 3px solid var(--accent);
            padding: 1rem; border-radius: 0 12px 12px 0;
            margin-bottom: 1rem;
        }

        .demo-author {
            font-weight: 600; color: var(--accent);
            margin-bottom: 0.5rem; font-size: 0.9rem;
        }

        .demo-content {
            color: var(--text); line-height: 1.5;
        }

        /* –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ */
        .features {
            padding: 4rem 2rem; max-width: 1200px; margin: 0 auto;
        }

        .features h2 {
            text-align: center; font-size: 3rem; font-weight: 900;
            margin-bottom: 3rem; color: var(--accent);
        }

        .features-grid {
            display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
        }

        .feature-card {
            background: linear-gradient(135deg, rgba(255,255,255,0.05), rgba(255,255,255,0.02));
            border: 1px solid var(--border); border-radius: 20px;
            padding: 2rem; text-align: center;
            transition: all 0.3s ease; backdrop-filter: blur(10px);
        }

        .feature-card:hover {
            transform: translateY(-10px);
            border-color: var(--accent);
            box-shadow: 0 20px 60px rgba(0, 212, 255, 0.2);
        }

        .feature-icon {
            font-size: 3rem; margin-bottom: 1rem;
            background: linear-gradient(45deg, var(--accent), var(--success));
            -webkit-background-clip: text; -webkit-text-fill-color: transparent;
        }

        .feature-title {
            font-size: 1.5rem; font-weight: 700;
            margin-bottom: 1rem; color: var(--text);
        }

        .feature-description {
            color: var(--text-secondary); line-height: 1.6;
        }

        /* –ü–æ–¥–≤–∞–ª */
        .footer {
            text-align: center; padding: 3rem 2rem;
            border-top: 1px solid var(--border);
            background: rgba(10, 10, 15, 0.8);
        }

        .footer p {
            color: var(--text-secondary); margin-bottom: 1rem;
        }

        .social-links {
            display: flex; justify-content: center; gap: 1rem;
        }

        .social-links a {
            display: inline-flex; align-items: center; justify-content: center;
            width: 40px; height: 40px; border-radius: 50%;
            background: var(--border); color: var(--text);
            text-decoration: none; transition: all 0.3s ease;
        }

        .social-links a:hover {
            background: var(--accent); transform: translateY(-2px);
        }

        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
        @media (max-width: 768px) {
            .hero-content { grid-template-columns: 1fr; text-align: center; }
            .nav-content { flex-direction: column; gap: 1rem; }
            .cta-buttons { justify-content: center; }
        }
    </style>
</head>
<body>
    <!-- –ù–∞–≤–∏–≥–∞—Ü–∏—è -->
    <nav class="navbar">
        <div class="nav-content">
            <div class="logo">
                <i class="fas fa-shield-alt"></i> SafeGram 4.0
            </div>
            <div class="nav-links">
                <a href="#features">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</a>
                <a href="/login">–í–æ–π—Ç–∏</a>
                <a href="/register">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>
                <a href="/admin">–ê–¥–º–∏–Ω–∫–∞</a>
            </div>
        </div>
    </nav>

    <!-- –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω -->
    <section class="hero">
        <div class="hero-content">
            <div class="hero-text">
                <h1>–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –±—É–¥—É—â–µ–≥–æ —É–∂–µ –∑–¥–µ—Å—å</h1>
                <p>SafeGram 4.0 Ultimate Pro - —ç—Ç–æ –Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ Discord –∏ Telegram, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ –≤ –æ–¥–Ω–æ–π –º–æ—â–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.</p>

                <div class="cta-buttons">
                    <a href="/register" class="btn btn-primary">
                        <i class="fas fa-rocket"></i> –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
                    </a>
                    <a href="/app" class="btn btn-secondary">
                        <i class="fas fa-play"></i> –î–µ–º–æ –≤–µ—Ä—Å–∏—è
                    </a>
                </div>

                <div class="hero-stats">
                    <div class="stat-card">
                        <div class="stat-value">{{ stats.get('total_users', 1) }}+</div>
                        <div class="stat-label">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">{{ messages_count }}+</div>
                        <div class="stat-label">–°–æ–æ–±—â–µ–Ω–∏–π</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">99.9%</div>
                        <div class="stat-label">–ê–ø—Ç–∞–π–º</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">{{ servers_count }}+</div>
                        <div class="stat-label">–°–µ—Ä–≤–µ—Ä–æ–≤</div>
                    </div>
                </div>
            </div>

            <div class="hero-demo">
                <div class="demo-window">
                    <div class="demo-header">
                        <div class="demo-dot"></div>
                        <div class="demo-dot"></div>
                        <div class="demo-dot"></div>
                        <span style="margin-left: 1rem; color: var(--text-secondary); font-size: 0.9rem;">SafeGram 4.0</span>
                    </div>

                    <div class="demo-message">
                        <div class="demo-author">ü§ñ AI Assistant</div>
                        <div class="demo-content">
                            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SafeGram 4.0 Ultimate Pro!<br>
                            <br>
                            ‚ú® <strong>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</strong><br>
                            ‚Ä¢ –°–µ—Ä–≤–µ—Ä—ã –∏ –∫–∞–Ω–∞–ª—ã –∫–∞–∫ –≤ Discord<br>
                            ‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã<br>
                            ‚Ä¢ –ë–æ—Ç—ã –∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∏<br>
                            ‚Ä¢ –¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è<br>
                            ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π<br>
                            ‚Ä¢ Marketplace —Å—Ç–∏–∫–µ—Ä–æ–≤
                        </div>
                    </div>

                    <div class="demo-message" style="background: rgba(0, 255, 136, 0.1); border-left-color: var(--success);">
                        <div class="demo-author" style="color: var(--success);">üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</div>
                        <div class="demo-content">
                            –ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç Discord –∏ Telegram! üöÄ
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ -->
    <section class="features" id="features">
        <h2>–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</h2>
        <div class="features-grid">
            <div class="feature-card">
                <div class="feature-icon">üè†</div>
                <div class="feature-title">–°–µ—Ä–≤–µ—Ä—ã –∏ –∫–∞–Ω–∞–ª—ã</div>
                <div class="feature-description">
                    –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏, 
                    —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞.
                </div>
            </div>

            <div class="feature-card">
                <div class="feature-icon">ü§ñ</div>
                <div class="feature-title">–£–º–Ω—ã–µ –±–æ—Ç—ã</div>
                <div class="feature-description">
                    –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–æ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–º–∞–Ω–¥, –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–≤ 
                    –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏.
                </div>
            </div>

            <div class="feature-card">
                <div class="feature-icon">üé®</div>
                <div class="feature-title">–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–º—ã</div>
                <div class="feature-description">
                    –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–æ–º–æ—â—å—é —Ç–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–ª–∏ 
                    —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ç–µ–º—É.
                </div>
            </div>

            <div class="feature-card">
                <div class="feature-icon">üèÜ</div>
                <div class="feature-title">–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</div>
                <div class="feature-description">
                    –ü–æ–ª—É—á–∞–π—Ç–µ –æ–ø—ã—Ç –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å 
                    –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.
                </div>
            </div>

            <div class="feature-card">
                <div class="feature-icon">üìÅ</div>
                <div class="feature-title">–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä</div>
                <div class="feature-description">
                    –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ—Å—å —Ñ–∞–π–ª–∞–º–∏ –¥–æ 100MB, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –≥–∞–ª–µ—Ä–µ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π 
                    –∏ –æ—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç.
                </div>
            </div>

            <div class="feature-card">
                <div class="feature-icon">üõ°Ô∏è</div>
                <div class="feature-title">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</div>
                <div class="feature-description">
                    –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ 
                    –∏ –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.
                </div>
            </div>

            <div class="feature-card">
                <div class="feature-icon">üéÆ</div>
                <div class="feature-title">–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</div>
                <div class="feature-description">
                    –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–∏–Ω–∏-–∏–≥—Ä—ã, —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤, —Ä–µ–∞–∫—Ü–∏–∏ –∏ —Å—Ç–∏–∫–µ—Ä—ã 
                    –¥–ª—è –≤–µ—Å–µ–ª–æ–≥–æ –æ–±—â–µ–Ω–∏—è.
                </div>
            </div>

            <div class="feature-card">
                <div class="feature-icon">üìä</div>
                <div class="feature-title">–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</div>
                <div class="feature-description">
                    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –æ—Ç—á–µ—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã 
                    –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤.
                </div>
            </div>
        </div>
    </section>

    <!-- –ü–æ–¥–≤–∞–ª -->
    <footer class="footer">
        <p>&copy; 2025 SafeGram 4.0 Ultimate Pro. –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é AI.</p>
        <div class="social-links">
            <a href="#"><i class="fab fa-github"></i></a>
            <a href="#"><i class="fab fa-discord"></i></a>
            <a href="#"><i class="fab fa-telegram"></i></a>
            <a href="#"><i class="fab fa-twitter"></i></a>
        </div>
    </footer>
</body>
</html>
    """, 
    stats=stats,
    messages_count=len(load_json(MESSAGES_JSON, [])),
    servers_count=len(load_json(SERVERS_JSON, []))
    )

@app.route('/login')
def login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    return render_template_string("""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–í—Ö–æ–¥ –≤ SafeGram 4.0</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            font-family: 'Segoe UI', -apple-system, BlinkMacSystemFont, system-ui, Arial;
            background: linear-gradient(135deg, #0a0a0f, #161620, #0d1117);
            color: #ffffff; min-height: 100vh;
            display: flex; align-items: center; justify-content: center;
            padding: 2rem;
        }

        body::before {
            content: '';
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: radial-gradient(circle at 30% 30%, rgba(0, 212, 255, 0.1), transparent 50%),
                       radial-gradient(circle at 70% 70%, rgba(0, 255, 136, 0.1), transparent 50%);
            animation: float 15s ease-in-out infinite alternate;
            z-index: -1;
        }

        @keyframes float {
            from { transform: translate(0, 0); }
            to { transform: translate(-20px, -20px); }
        }

        .login-container {
            background: linear-gradient(135deg, rgba(22, 22, 32, 0.9), rgba(16, 16, 30, 0.9));
            border: 1px solid #2a2a3a; border-radius: 20px;
            padding: 3rem; max-width: 400px; width: 100%;
            box-shadow: 0 20px 60px rgba(0,0,0,0.4);
            backdrop-filter: blur(20px);
        }

        .logo {
            text-align: center; margin-bottom: 2rem;
        }

        .logo i {
            font-size: 3rem; color: #00d4ff;
            text-shadow: 0 0 20px rgba(0, 212, 255, 0.8);
            animation: logoGlow 3s ease-in-out infinite alternate;
        }

        @keyframes logoGlow {
            from { text-shadow: 0 0 10px rgba(0, 212, 255, 0.8); }
            to { text-shadow: 0 0 30px rgba(0, 212, 255, 1); }
        }

        .logo h1 {
            font-size: 1.8rem; font-weight: 900;
            margin-top: 0.5rem; color: #00d4ff;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block; margin-bottom: 0.5rem;
            color: #b8b8c6; font-weight: 600; font-size: 0.9rem;
        }

        .form-group input {
            width: 100%; padding: 1rem; border: 1px solid #2a2a3a;
            border-radius: 12px; background: rgba(255,255,255,0.05);
            color: #ffffff; font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-group input:focus {
            outline: none; border-color: #00d4ff;
            box-shadow: 0 0 20px rgba(0, 212, 255, 0.2);
        }

        .login-btn {
            width: 100%; padding: 1rem; border: none;
            border-radius: 12px; font-size: 1.1rem; font-weight: 700;
            background: linear-gradient(135deg, #00d4ff, #0099cc);
            color: white; cursor: pointer; transition: all 0.3s ease;
            text-transform: uppercase; letter-spacing: 0.5px;
            margin-bottom: 1rem;
        }

        .login-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(0, 212, 255, 0.4);
        }

        .demo-info {
            background: rgba(255, 170, 0, 0.1);
            border: 1px solid rgba(255, 170, 0, 0.3);
            border-radius: 10px; padding: 1rem;
            margin-bottom: 1.5rem; font-size: 0.85rem;
            color: #ffaa00;
        }

        .demo-info strong { color: #ffffff; }

        .links {
            text-align: center; margin-top: 1.5rem;
        }

        .links a {
            color: #00d4ff; text-decoration: none;
            transition: all 0.3s ease;
        }

        .links a:hover {
            color: #00ff88; text-shadow: 0 0 10px rgba(0, 255, 136, 0.5);
        }

        .error {
            background: rgba(255, 68, 68, 0.1);
            border: 1px solid rgba(255, 68, 68, 0.3);
            border-radius: 10px; padding: 1rem;
            margin-bottom: 1rem; color: #ff4444;
            text-align: center; font-weight: 600;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="logo">
            <i class="fas fa-shield-alt"></i>
            <h1>SafeGram 4.0</h1>
        </div>

        <div class="demo-info">
            <strong>–î–µ–º–æ –¥–æ—Å—Ç—É–ø—ã:</strong><br>
            üëë <strong>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</strong> admin / panel<br>
            üë§ <strong>–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç</strong>
        </div>

        <form id="loginForm">
            <div class="form-group">
                <label>Email –∏–ª–∏ –ª–æ–≥–∏–Ω</label>
                <input type="text" id="email" placeholder="admin –∏–ª–∏ –≤–∞—à email" required>
            </div>

            <div class="form-group">
                <label>–ü–∞—Ä–æ–ª—å</label>
                <input type="password" id="password" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" required>
            </div>

            <div id="error" class="error" style="display: none;"></div>

            <button type="submit" class="login-btn">
                <i class="fas fa-sign-in-alt"></i> –í–æ–π—Ç–∏
            </button>
        </form>

        <div class="links">
            <p>–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? <a href="/register">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a></p>
            <p><a href="/">‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é</a></p>
        </div>
    </div>

    <script>
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const errorDiv = document.getElementById('error');

            try {
                const response = await fetch('/api/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email, password })
                });

                const result = await response.json();

                if (result.success) {
                    if (email === 'admin') {
                        window.location.href = '/admin';
                    } else {
                        window.location.href = '/app';
                    }
                } else {
                    errorDiv.textContent = result.error;
                    errorDiv.style.display = 'block';
                }
            } catch (error) {
                errorDiv.textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É';
                errorDiv.style.display = 'block';
            }
        });
    </script>
</body>
</html>
    """)

@app.route('/register')
def register_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    return render_template_string("""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ SafeGram 4.0</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            font-family: 'Segoe UI', -apple-system, BlinkMacSystemFont, system-ui, Arial;
            background: linear-gradient(135deg, #0a0a0f, #161620, #0d1117);
            color: #ffffff; min-height: 100vh;
            display: flex; align-items: center; justify-content: center;
            padding: 2rem;
        }

        body::before {
            content: '';
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: radial-gradient(circle at 70% 30%, rgba(0, 255, 136, 0.1), transparent 50%),
                       radial-gradient(circle at 30% 70%, rgba(255, 170, 0, 0.1), transparent 50%);
            animation: float 15s ease-in-out infinite alternate;
            z-index: -1;
        }

        @keyframes float {
            from { transform: translate(0, 0); }
            to { transform: translate(20px, -20px); }
        }

        .register-container {
            background: linear-gradient(135deg, rgba(22, 22, 32, 0.9), rgba(16, 16, 30, 0.9));
            border: 1px solid #2a2a3a; border-radius: 20px;
            padding: 3rem; max-width: 450px; width: 100%;
            box-shadow: 0 20px 60px rgba(0,0,0,0.4);
            backdrop-filter: blur(20px);
        }

        .logo {
            text-align: center; margin-bottom: 2rem;
        }

        .logo i {
            font-size: 3rem; color: #00ff88;
            text-shadow: 0 0 20px rgba(0, 255, 136, 0.8);
            animation: logoGlow 3s ease-in-out infinite alternate;
        }

        @keyframes logoGlow {
            from { text-shadow: 0 0 10px rgba(0, 255, 136, 0.8); }
            to { text-shadow: 0 0 30px rgba(0, 255, 136, 1); }
        }

        .logo h1 {
            font-size: 1.8rem; font-weight: 900;
            margin-top: 0.5rem; color: #00ff88;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block; margin-bottom: 0.5rem;
            color: #b8b8c6; font-weight: 600; font-size: 0.9rem;
        }

        .form-group input {
            width: 100%; padding: 1rem; border: 1px solid #2a2a3a;
            border-radius: 12px; background: rgba(255,255,255,0.05);
            color: #ffffff; font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-group input:focus {
            outline: none; border-color: #00ff88;
            box-shadow: 0 0 20px rgba(0, 255, 136, 0.2);
        }

        .register-btn {
            width: 100%; padding: 1rem; border: none;
            border-radius: 12px; font-size: 1.1rem; font-weight: 700;
            background: linear-gradient(135deg, #00ff88, #00cc66);
            color: white; cursor: pointer; transition: all 0.3s ease;
            text-transform: uppercase; letter-spacing: 0.5px;
            margin-bottom: 1rem;
        }

        .register-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(0, 255, 136, 0.4);
        }

        .password-requirements {
            background: rgba(0, 212, 255, 0.1);
            border: 1px solid rgba(0, 212, 255, 0.3);
            border-radius: 10px; padding: 1rem;
            margin-bottom: 1.5rem; font-size: 0.85rem;
            color: #00d4ff;
        }

        .password-requirements ul {
            list-style: none; margin-top: 0.5rem;
        }

        .password-requirements li {
            margin-bottom: 0.25rem;
        }

        .password-requirements li::before {
            content: '‚úì'; margin-right: 0.5rem; color: #00ff88;
        }

        .links {
            text-align: center; margin-top: 1.5rem;
        }

        .links a {
            color: #00ff88; text-decoration: none;
            transition: all 0.3s ease;
        }

        .links a:hover {
            color: #00d4ff; text-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
        }

        .error, .success {
            border-radius: 10px; padding: 1rem;
            margin-bottom: 1rem; text-align: center; font-weight: 600;
        }

        .error {
            background: rgba(255, 68, 68, 0.1);
            border: 1px solid rgba(255, 68, 68, 0.3);
            color: #ff4444;
        }

        .success {
            background: rgba(0, 255, 136, 0.1);
            border: 1px solid rgba(0, 255, 136, 0.3);
            color: #00ff88;
        }
    </style>
</head>
<body>
    <div class="register-container">
        <div class="logo">
            <i class="fas fa-user-plus"></i>
            <h1>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</h1>
        </div>

        <div class="password-requirements">
            <strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:</strong>
            <ul>
                <li>–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤</li>
                <li>–°–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã</li>
                <li>–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ</li>
            </ul>
        </div>

        <form id="registerForm">
            <div class="form-group">
                <label>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                <input type="text" id="username" placeholder="–í–∞—à–µ –∏–º—è –≤ SafeGram" required>
            </div>

            <div class="form-group">
                <label>Email</label>
                <input type="email" id="email" placeholder="your@email.com" required>
            </div>

            <div class="form-group">
                <label>–ü–∞—Ä–æ–ª—å</label>
                <input type="password" id="password" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" required>
            </div>

            <div class="form-group">
                <label>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
                <input type="password" id="confirmPassword" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" required>
            </div>

            <div id="message" style="display: none;"></div>

            <button type="submit" class="register-btn">
                <i class="fas fa-rocket"></i> –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
            </button>
        </form>

        <div class="links">
            <p>–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <a href="/login">–í–æ–π—Ç–∏</a></p>
            <p><a href="/">‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é</a></p>
        </div>
    </div>

    <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const username = document.getElementById('username').value;
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            const messageDiv = document.getElementById('message');

            // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if (password !== confirmPassword) {
                messageDiv.className = 'error';
                messageDiv.textContent = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
                messageDiv.style.display = 'block';
                return;
            }

            if (password.length < 6) {
                messageDiv.className = 'error';
                messageDiv.textContent = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤';
                messageDiv.style.display = 'block';
                return;
            }

            try {
                const response = await fetch('/api/register', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username, email, password })
                });

                const result = await response.json();

                if (result.success) {
                    messageDiv.className = 'success';
                    messageDiv.textContent = '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...';
                    messageDiv.style.display = 'block';

                    setTimeout(() => {
                        window.location.href = '/app';
                    }, 2000);
                } else {
                    messageDiv.className = 'error';
                    messageDiv.textContent = result.error;
                    messageDiv.style.display = 'block';
                }
            } catch (error) {
                messageDiv.className = 'error';
                messageDiv.textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É';
                messageDiv.style.display = 'block';
            }
        });
    </script>
</body>
</html>
    """)

print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã")

# ========================================================================
# –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ú–ï–°–°–ï–ù–î–ñ–ï–†–ê
# ========================================================================

@app.route('/app')
def messenger_app():
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ SafeGram 4.0"""
    user = SessionManager.get_current_user()
    if not user:
        return redirect('/login')

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    user_servers = ServerManager.get_user_servers(user['id'])
    user_friends = user.get('friends', [])

    return render_template_string("""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SafeGram 4.0 - {{ user.username }}</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }

        :root {
            --bg-primary: #0a0a0f;
            --bg-secondary: #161620;
            --bg-tertiary: #1f1f2e;
            --text-primary: #ffffff;
            --text-secondary: #b8b8c6;
            --accent: #00d4ff;
            --success: #00ff88;
            --warning: #ffaa00;
            --danger: #ff4444;
            --border: #2a2a3a;
            --shadow: rgba(0, 0, 0, 0.4);
            --hover: rgba(0, 212, 255, 0.1);
        }

        body {
            font-family: 'Segoe UI', -apple-system, BlinkMacSystemFont, system-ui, Arial;
            background: var(--bg-primary);
            color: var(--text-primary);
            height: 100vh; overflow: hidden;
        }

        /* –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
        .app-container {
            display: grid;
            grid-template-columns: 80px 280px 1fr 300px;
            height: 100vh;
            background: linear-gradient(135deg, var(--bg-primary), var(--bg-secondary));
        }

        /* –õ–µ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å–µ—Ä–≤–µ—Ä–æ–≤ */
        .server-list {
            background: var(--bg-secondary);
            border-right: 1px solid var(--border);
            padding: 20px 10px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 15px;
            overflow-y: auto;
        }

        .server-icon {
            width: 50px; height: 50px;
            border-radius: 25px;
            background: var(--bg-tertiary);
            display: flex; align-items: center; justify-content: center;
            cursor: pointer; transition: all 0.3s ease;
            font-size: 1.5rem; color: var(--text-secondary);
            border: 2px solid transparent;
            position: relative;
        }

        .server-icon:hover, .server-icon.active {
            border-radius: 15px;
            background: var(--accent);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 212, 255, 0.3);
        }

        .server-icon.active::before {
            content: '';
            position: absolute; left: -15px; top: 50%;
            transform: translateY(-50%);
            width: 4px; height: 40px;
            background: white; border-radius: 2px;
        }

        /* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ */
        .add-server {
            border: 2px dashed var(--border);
            color: var(--text-secondary);
            font-size: 1.2rem;
        }

        .add-server:hover {
            border-color: var(--success);
            background: rgba(0, 255, 136, 0.1);
            color: var(--success);
        }

        /* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∫–∞–Ω–∞–ª–æ–≤ */
        .channels-sidebar {
            background: var(--bg-tertiary);
            border-right: 1px solid var(--border);
            display: flex;
            flex-direction: column;
        }

        .server-header {
            padding: 20px;
            border-bottom: 1px solid var(--border);
            background: var(--bg-secondary);
        }

        .server-name {
            font-size: 1.2rem; font-weight: 700;
            margin-bottom: 5px; color: var(--text-primary);
        }

        .server-description {
            font-size: 0.9rem; color: var(--text-secondary);
        }

        .channels-list {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }

        .channel-category {
            color: var(--text-secondary);
            font-size: 0.8rem; font-weight: 700;
            text-transform: uppercase;
            margin: 20px 0 10px;
            letter-spacing: 0.5px;
        }

        .channel-item {
            display: flex; align-items: center;
            padding: 8px 12px; margin-bottom: 4px;
            border-radius: 8px; cursor: pointer;
            transition: all 0.2s ease;
            color: var(--text-secondary);
        }

        .channel-item:hover {
            background: var(--hover);
            color: var(--accent);
        }

        .channel-item.active {
            background: var(--accent);
            color: white;
        }

        .channel-icon {
            width: 20px; text-align: center;
            margin-right: 8px; font-size: 0.9rem;
        }

        .channel-name {
            flex: 1; font-weight: 500;
        }

        .channel-badge {
            background: var(--accent);
            color: white; font-size: 0.7rem;
            padding: 2px 6px; border-radius: 10px;
            font-weight: 600;
        }

        /* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */
        .chat-area {
            display: flex;
            flex-direction: column;
            background: var(--bg-primary);
        }

        .chat-header {
            padding: 20px;
            border-bottom: 1px solid var(--border);
            background: var(--bg-secondary);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chat-info h3 {
            color: var(--text-primary);
            font-size: 1.3rem; font-weight: 700;
            margin-bottom: 2px;
        }

        .chat-info p {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .chat-actions {
            display: flex;
            gap: 10px;
        }

        .chat-actions button {
            background: transparent;
            border: 1px solid var(--border);
            color: var(--text-secondary);
            padding: 8px 12px; border-radius: 8px;
            cursor: pointer; transition: all 0.2s ease;
            font-size: 0.9rem;
        }

        .chat-actions button:hover {
            border-color: var(--accent);
            color: var(--accent);
        }

        .messages-container {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .message {
            display: flex;
            gap: 15px;
        }

        .message-avatar {
            width: 40px; height: 40px;
            border-radius: 50%;
            background: var(--accent);
            display: flex; align-items: center; justify-content: center;
            font-size: 1.2rem; flex-shrink: 0;
        }

        .message-content {
            flex: 1;
        }

        .message-header {
            display: flex; align-items: center;
            gap: 10px; margin-bottom: 5px;
        }

        .message-author {
            font-weight: 600;
            color: var(--accent);
        }

        .message-time {
            font-size: 0.8rem;
            color: var(--text-secondary);
        }

        .message-text {
            line-height: 1.5;
            color: var(--text-primary);
        }

        .message-actions {
            opacity: 0; display: flex; gap: 5px;
            margin-top: 5px; transition: opacity 0.2s;
        }

        .message:hover .message-actions {
            opacity: 1;
        }

        .message-actions button {
            background: transparent;
            border: none; color: var(--text-secondary);
            padding: 4px 8px; border-radius: 4px;
            cursor: pointer; font-size: 0.8rem;
            transition: all 0.2s;
        }

        .message-actions button:hover {
            background: var(--hover);
            color: var(--accent);
        }

        /* –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è */
        .message-input-area {
            padding: 20px;
            border-top: 1px solid var(--border);
            background: var(--bg-secondary);
        }

        .message-input-container {
            background: var(--bg-primary);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 15px;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .message-input {
            flex: 1;
            background: transparent;
            border: none; outline: none;
            color: var(--text-primary);
            font-size: 1rem;
            resize: none; min-height: 20px;
        }

        .message-input::placeholder {
            color: var(--text-secondary);
        }

        .input-actions {
            display: flex;
            gap: 10px;
        }

        .input-actions button {
            background: transparent;
            border: none; color: var(--text-secondary);
            cursor: pointer; padding: 8px;
            border-radius: 6px; transition: all 0.2s;
        }

        .input-actions button:hover {
            background: var(--hover);
            color: var(--accent);
        }

        .send-button {
            background: var(--accent) !important;
            color: white !important;
        }

        .send-button:hover {
            background: var(--success) !important;
            transform: scale(1.1);
        }

        /* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å */
        .right-panel {
            background: var(--bg-tertiary);
            border-left: 1px solid var(--border);
            display: flex;
            flex-direction: column;
        }

        .panel-tabs {
            display: flex;
            border-bottom: 1px solid var(--border);
            background: var(--bg-secondary);
        }

        .panel-tab {
            flex: 1; padding: 15px;
            text-align: center;
            background: transparent;
            border: none; color: var(--text-secondary);
            cursor: pointer; transition: all 0.2s;
            font-weight: 600;
        }

        .panel-tab.active {
            color: var(--accent);
            border-bottom: 2px solid var(--accent);
        }

        .panel-content {
            flex: 1; padding: 20px;
            overflow-y: auto;
        }

        .user-profile {
            text-align: center;
            padding: 20px 0;
            border-bottom: 1px solid var(--border);
            margin-bottom: 20px;
        }

        .user-avatar {
            width: 80px; height: 80px;
            border-radius: 50%;
            background: var(--accent);
            margin: 0 auto 15px;
            display: flex; align-items: center; justify-content: center;
            font-size: 2rem;
        }

        .user-name {
            font-size: 1.3rem; font-weight: 700;
            margin-bottom: 5px; color: var(--text-primary);
        }

        .user-status {
            color: var(--success);
            font-size: 0.9rem;
        }

        .user-level {
            background: linear-gradient(45deg, var(--accent), var(--success));
            color: white; padding: 5px 10px;
            border-radius: 15px; font-size: 0.8rem;
            font-weight: 600; margin-top: 10px;
            display: inline-block;
        }

        /* –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */
        .members-list {
            list-style: none;
        }

        .member-item {
            display: flex; align-items: center;
            gap: 10px; padding: 8px 0;
            color: var(--text-secondary);
            transition: color 0.2s;
        }

        .member-item:hover {
            color: var(--text-primary);
        }

        .member-avatar {
            width: 32px; height: 32px;
            border-radius: 50%;
            background: var(--border);
            display: flex; align-items: center; justify-content: center;
            font-size: 0.9rem;
        }

        .member-info {
            flex: 1;
        }

        .member-name {
            font-weight: 500;
        }

        .member-status {
            font-size: 0.8rem;
        }

        .status-indicator {
            width: 8px; height: 8px;
            border-radius: 50%;
            background: var(--success);
        }

        .status-indicator.offline {
            background: var(--text-secondary);
        }

        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
        @media (max-width: 768px) {
            .app-container {
                grid-template-columns: 1fr;
            }

            .server-list, .right-panel {
                display: none;
            }

            .channels-sidebar {
                position: fixed; left: -280px;
                z-index: 1000; height: 100vh;
                transition: left 0.3s ease;
            }

            .channels-sidebar.open {
                left: 0;
            }
        }

        /* –ê–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ */
        .loading {
            display: inline-block;
            width: 20px; height: 20px;
            border: 2px solid var(--border);
            border-radius: 50%;
            border-top: 2px solid var(--accent);
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
        .notification {
            position: fixed; top: 20px; right: 20px;
            background: var(--bg-tertiary);
            border: 1px solid var(--border);
            border-radius: 12px; padding: 15px 20px;
            box-shadow: 0 10px 40px var(--shadow);
            z-index: 10000; max-width: 300px;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            border-color: var(--success);
        }

        .notification.error {
            border-color: var(--danger);
        }

        /* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */
        .modal-overlay {
            position: fixed; top: 0; left: 0;
            width: 100%; height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex; align-items: center; justify-content: center;
            z-index: 10000; opacity: 0;
            visibility: hidden; transition: all 0.3s ease;
        }

        .modal-overlay.active {
            opacity: 1; visibility: visible;
        }

        .modal {
            background: var(--bg-tertiary);
            border: 1px solid var(--border);
            border-radius: 16px; padding: 30px;
            max-width: 500px; width: 90%;
            transform: scale(0.9);
            transition: transform 0.3s ease;
        }

        .modal-overlay.active .modal {
            transform: scale(1);
        }

        .modal h3 {
            margin-bottom: 20px;
            color: var(--text-primary);
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block; margin-bottom: 5px;
            color: var(--text-secondary); font-weight: 500;
        }

        .form-group input, .form-group textarea {
            width: 100%; padding: 12px;
            background: var(--bg-primary);
            border: 1px solid var(--border);
            border-radius: 8px; color: var(--text-primary);
            font-family: inherit;
        }

        .form-group input:focus, .form-group textarea:focus {
            outline: none; border-color: var(--accent);
        }

        .modal-actions {
            display: flex; gap: 10px;
            justify-content: flex-end;
            margin-top: 20px;
        }

        .btn {
            padding: 10px 20px; border: none;
            border-radius: 8px; cursor: pointer;
            font-weight: 600; transition: all 0.2s;
        }

        .btn-primary {
            background: var(--accent); color: white;
        }

        .btn-primary:hover {
            background: var(--success);
        }

        .btn-secondary {
            background: var(--border); color: var(--text-primary);
        }

        .btn-secondary:hover {
            background: var(--hover);
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ -->
        <div class="server-list">
            <div class="server-icon active" data-server="main" title="SafeGram Community">
                üè†
            </div>
            {% for server in user_servers %}
            {% if server.id != 'main' %}
            <div class="server-icon" data-server="{{ server.id }}" title="{{ server.name }}">
                {{ server.icon }}
            </div>
            {% endif %}
            {% endfor %}
            <div class="server-icon add-server" onclick="showCreateServerModal()" title="–°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä">
                <i class="fas fa-plus"></i>
            </div>
        </div>

        <!-- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∫–∞–Ω–∞–ª–æ–≤ -->
        <div class="channels-sidebar">
            <div class="server-header">
                <div class="server-name" id="currentServerName">SafeGram Community</div>
                <div class="server-description" id="currentServerDescription">–ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä SafeGram</div>
            </div>

            <div class="channels-list">
                <div class="channel-category">–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã</div>
                <div class="channel-item active" data-channel="general" data-type="text">
                    <div class="channel-icon">#</div>
                    <div class="channel-name">–æ–±—â–∏–π</div>
                    <div class="channel-badge" style="display: none;">3</div>
                </div>
                <div class="channel-item" data-channel="tech" data-type="text">
                    <div class="channel-icon">#</div>
                    <div class="channel-name">—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</div>
                </div>
                <div class="channel-item" data-channel="random" data-type="text">
                    <div class="channel-icon">#</div>
                    <div class="channel-name">—Å–ª—É—á–∞–π–Ω–æ–µ</div>
                </div>

                <div class="channel-category">–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã</div>
                <div class="channel-item" data-channel="voice_general" data-type="voice">
                    <div class="channel-icon">üîä</div>
                    <div class="channel-name">–û–±—â–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–π</div>
                </div>
                <div class="channel-item" data-channel="voice_music" data-type="voice">
                    <div class="channel-icon">üéµ</div>
                    <div class="channel-name">–ú—É–∑—ã–∫–∞</div>
                </div>
            </div>
        </div>

        <!-- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ -->
        <div class="chat-area">
            <div class="chat-header">
                <div class="chat-info">
                    <h3 id="currentChannelName"># –æ–±—â–∏–π</h3>
                    <p id="currentChannelTopic">–ì–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—â–µ–Ω–∏—è</p>
                </div>
                <div class="chat-actions">
                    <button onclick="toggleSearch()"><i class="fas fa-search"></i> –ü–æ–∏—Å–∫</button>
                    <button onclick="showChannelSettings()"><i class="fas fa-cog"></i> –ù–∞—Å—Ç—Ä–æ–π–∫–∏</button>
                    <button onclick="togglePinnedMessages()"><i class="fas fa-thumbtack"></i> –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ</button>
                </div>
            </div>

            <div class="messages-container" id="messagesContainer">
                <!-- –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ JavaScript -->
                <div class="loading" style="margin: 20px auto;"></div>
            </div>

            <div class="message-input-area">
                <div class="message-input-container">
                    <textarea id="messageInput" class="message-input" 
                             placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ #–æ–±—â–∏–π..." 
                             rows="1"
                             onkeypress="handleMessageInput(event)"></textarea>
                    <div class="input-actions">
                        <button onclick="toggleEmojiPicker()" title="–≠–º–æ–¥–∑–∏">
                            <i class="fas fa-smile"></i>
                        </button>
                        <button onclick="attachFile()" title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª">
                            <i class="fas fa-paperclip"></i>
                        </button>
                        <button onclick="recordVoice()" title="–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ">
                            <i class="fas fa-microphone"></i>
                        </button>
                        <button class="send-button" onclick="sendMessage()" title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å -->
        <div class="right-panel">
            <div class="panel-tabs">
                <button class="panel-tab active" onclick="switchPanel('members')">
                    <i class="fas fa-users"></i> –£—á–∞—Å—Ç–Ω–∏–∫–∏
                </button>
                <button class="panel-tab" onclick="switchPanel('profile')">
                    <i class="fas fa-user"></i> –ü—Ä–æ—Ñ–∏–ª—å  
                </button>
            </div>

            <div class="panel-content" id="panelContent">
                <div id="membersPanel">
                    <h4 style="color: var(--text-secondary); margin-bottom: 15px; font-size: 0.9rem; text-transform: uppercase;">
                        –û–Ω–ª–∞–π–Ω ‚Äî 2
                    </h4>
                    <ul class="members-list">
                        <li class="member-item">
                            <div class="member-avatar">üë§</div>
                            <div class="member-info">
                                <div class="member-name">{{ user.username }}</div>
                                <div class="member-status">üéÆ –í SafeGram</div>
                            </div>
                            <div class="status-indicator"></div>
                        </li>
                        <li class="member-item">
                            <div class="member-avatar">ü§ñ</div>
                            <div class="member-info">
                                <div class="member-name">AI Assistant</div>
                                <div class="member-status">üí¨ –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã</div>
                            </div>
                            <div class="status-indicator"></div>
                        </li>
                    </ul>

                    <h4 style="color: var(--text-secondary); margin: 20px 0 15px; font-size: 0.9rem; text-transform: uppercase;">
                        –û—Ñ–ª–∞–π–Ω ‚Äî 0
                    </h4>
                </div>

                <div id="profilePanel" style="display: none;">
                    <div class="user-profile">
                        <div class="user-avatar">{{ user.get('avatar', 'üë§') }}</div>
                        <div class="user-name">{{ user.username }}</div>
                        <div class="user-status">üü¢ –í —Å–µ—Ç–∏</div>
                        <div class="user-level">–£—Ä–æ–≤–µ–Ω—å {{ user.get('level', 1) }}</div>
                    </div>

                    <div style="margin-bottom: 20px;">
                        <h4 style="color: var(--text-secondary); margin-bottom: 10px;">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
                        <div style="font-size: 0.9rem; line-height: 1.6;">
                            <div>üìä –°–æ–æ–±—â–µ–Ω–∏–π: <strong>{{ user.get('statistics', {}).get('messages_sent', 0) }}</strong></div>
                            <div>üìÅ –§–∞–π–ª–æ–≤: <strong>{{ user.get('statistics', {}).get('files_shared', 0) }}</strong></div>
                            <div>üè† –°–µ—Ä–≤–µ—Ä–æ–≤: <strong>{{ user_servers|length }}</strong></div>
                            <div>üë• –î—Ä—É–∑–µ–π: <strong>{{ user_friends|length }}</strong></div>
                        </div>
                    </div>

                    <div style="display: flex; flex-direction: column; gap: 10px;">
                        <button class="btn btn-primary" onclick="showUserSettings()">
                            <i class="fas fa-cog"></i> –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                        </button>
                        <button class="btn btn-secondary" onclick="showThemeSelector()">
                            <i class="fas fa-palette"></i> –¢–µ–º—ã
                        </button>
                        <button class="btn btn-secondary" onclick="logout()">
                            <i class="fas fa-sign-out-alt"></i> –í—ã–π—Ç–∏
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
    <!-- –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ -->
    <div class="modal-overlay" id="createServerModal">
        <div class="modal">
            <h3>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä</h3>
            <form id="createServerForm">
                <div class="form-group">
                    <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞</label>
                    <input type="text" id="serverName" placeholder="–ú–æ–π –∫—Ä—É—Ç–æ–π —Å–µ—Ä–≤–µ—Ä" required>
                </div>
                <div class="form-group">
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                    <textarea id="serverDescription" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞..." rows="3"></textarea>
                </div>
                <div class="form-group">
                    <label>–ò–∫–æ–Ω–∫–∞ (—ç–º–æ–¥–∑–∏)</label>
                    <input type="text" id="serverIcon" placeholder="üéÆ" maxlength="2">
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeModal('createServerModal')">–û—Ç–º–µ–Ω–∞</button>
                    <button type="submit" class="btn btn-primary">–°–æ–∑–¥–∞—Ç—å</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        let currentServerId = 'main';
        let currentChannelId = 'general';
        let currentUser = {{ user | tojson }};
        let messages = [];
        let loadingMessages = false;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        document.addEventListener('DOMContentLoaded', function() {
            loadInitialData();
            setupEventListeners();
            startPeriodicUpdates();
        });

        // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        async function loadInitialData() {
            try {
                await loadMessages();
                await loadServerData();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
                showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        async function loadMessages() {
            if (loadingMessages) return;
            loadingMessages = true;

            try {
                const response = await fetch(`/api/channels/${currentChannelId}/messages?limit=50`);
                const result = await response.json();

                if (result.success) {
                    messages = result.messages.reverse(); // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                    renderMessages();
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            } finally {
                loadingMessages = false;
            }
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        function renderMessages() {
            const container = document.getElementById('messagesContainer');

            if (messages.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; color: var(--text-secondary); padding: 40px;">
                        <i class="fas fa-comments" style="font-size: 3rem; margin-bottom: 15px; opacity: 0.5;"></i>
                        <h3>–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ!</h3>
                        <p>–≠—Ç–æ –Ω–∞—á–∞–ª–æ –∫–∞–Ω–∞–ª–∞ #–æ–±—â–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = messages.map(message => {
                const author = message.author || { username: 'Unknown', avatar: 'üë§' };
                const time = new Date(message.created_at * 1000).toLocaleTimeString('ru', {
                    hour: '2-digit',
                    minute: '2-digit'
                });

                return `
                    <div class="message" data-message-id="${message.id}">
                        <div class="message-avatar">${author.avatar}</div>
                        <div class="message-content">
                            <div class="message-header">
                                <div class="message-author">${author.username}</div>
                                <div class="message-time">${time}</div>
                            </div>
                            <div class="message-text">${formatMessageContent(message.content)}</div>
                            ${message.author_id === currentUser.id ? `
                                <div class="message-actions">
                                    <button onclick="editMessage('${message.id}')">
                                        <i class="fas fa-edit"></i> –ò–∑–º–µ–Ω–∏—Ç—å
                                    </button>
                                    <button onclick="deleteMessage('${message.id}')">
                                        <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                                    </button>
                                </div>
                            ` : `
                                <div class="message-actions">
                                    <button onclick="replyToMessage('${message.id}')">
                                        <i class="fas fa-reply"></i> –û—Ç–≤–µ—Ç–∏—Ç—å
                                    </button>
                                    <button onclick="addReaction('${message.id}', 'üëç')">
                                        <i class="fas fa-thumbs-up"></i> –õ–∞–π–∫
                                    </button>
                                </div>
                            `}
                        </div>
                    </div>
                `;
            }).join('');

            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            container.scrollTop = container.scrollHeight;
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        function formatMessageContent(content) {
            // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            return content
                .replace(r'\*\*(.*?)\*\*', '<strong>\\1</strong>')  # **bold**
                .replace(/\*(.*?)\*/g, '<em>$1</em>')               // *italic*
                .replace(/`(.*?)`/g, '<code>$1</code>')             // `code`
                .replace(/\n/g, '<br>');                           // –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const content = input.value.trim();

            if (!content) return;

            try {
                const response = await fetch(`/api/channels/${currentChannelId}/messages`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ content })
                });

                const result = await response.json();

                if (result.success) {
                    input.value = '';
                    input.style.height = 'auto';
                    await loadMessages();
                } else {
                    showNotification(result.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        function handleMessageInput(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –ø–æ–ª—è –≤–≤–æ–¥–∞
            const input = event.target;
            input.style.height = 'auto';
            input.style.height = Math.min(input.scrollHeight, 200) + 'px';
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        function setupEventListeners() {
            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
            document.querySelectorAll('.server-icon[data-server]').forEach(icon => {
                icon.addEventListener('click', function() {
                    switchServer(this.dataset.server);
                });
            });

            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
            document.querySelectorAll('.channel-item[data-channel]').forEach(item => {
                item.addEventListener('click', function() {
                    switchChannel(this.dataset.channel);
                });
            });

            // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
            document.getElementById('createServerForm').addEventListener('submit', handleCreateServer);

            // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
            document.querySelectorAll('.modal-overlay').forEach(overlay => {
                overlay.addEventListener('click', function(e) {
                    if (e.target === this) {
                        this.classList.remove('active');
                    }
                });
            });
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        function switchServer(serverId) {
            currentServerId = serverId;

            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            document.querySelectorAll('.server-icon').forEach(icon => {
                icon.classList.remove('active');
            });
            document.querySelector(`[data-server="${serverId}"]`).classList.add('active');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã —Å–µ—Ä–≤–µ—Ä–∞
            loadServerChannels();
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        function switchChannel(channelId) {
            currentChannelId = channelId;

            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª
            document.querySelectorAll('.channel-item').forEach(item => {
                item.classList.remove('active');
            });
            document.querySelector(`[data-channel="${channelId}"]`).classList.add('active');

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
            const channelName = document.querySelector(`[data-channel="${channelId}"] .channel-name`).textContent;
            document.getElementById('currentChannelName').textContent = `# ${channelName}`;

            // –û–±–Ω–æ–≤–ª—è–µ–º placeholder –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            document.getElementById('messageInput').placeholder = `–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ #${channelName}...`;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            loadMessages();
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
        async function loadServerChannels() {
            // –í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;

            document.body.appendChild(notification);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            setTimeout(() => notification.classList.add('show'), 100);

            // –°–∫—Ä—ã–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        function showCreateServerModal() {
            document.getElementById('createServerModal').classList.add('active');
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('active');
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        async function handleCreateServer(event) {
            event.preventDefault();

            const name = document.getElementById('serverName').value.trim();
            const description = document.getElementById('serverDescription').value.trim();
            const icon = document.getElementById('serverIcon').value.trim() || 'üè†';

            if (!name) {
                showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞', 'error');
                return;
            }

            try {
                const response = await fetch('/api/servers', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name, description, icon })
                });

                const result = await response.json();

                if (result.success) {
                    showNotification('–°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω!', 'success');
                    closeModal('createServerModal');
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showNotification(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞', 'error');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:', error);
                showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞', 'error');
            }
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π
        function switchPanel(panel) {
            document.querySelectorAll('.panel-tab').forEach(tab => tab.classList.remove('active'));
            document.querySelector(`[onclick="switchPanel('${panel}')"]`).classList.add('active');

            if (panel === 'members') {
                document.getElementById('membersPanel').style.display = 'block';
                document.getElementById('profilePanel').style.display = 'none';
            } else if (panel === 'profile') {
                document.getElementById('membersPanel').style.display = 'none';
                document.getElementById('profilePanel').style.display = 'block';
            }
        }

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        function startPeriodicUpdates() {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            setInterval(() => {
                if (!loadingMessages) {
                    loadMessages();
                }
            }, 5000);

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            setInterval(() => {
                updateOnlineStatus();
            }, 30000);
        }

        async function updateOnlineStatus() {
            // –ü—Ä–æ—Å—Ç–æ–π ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
            try {
                await fetch('/api/me');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
            }
        }

        // –î–µ–π—Å—Ç–≤–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        async function deleteMessage(messageId) {
            if (!confirm('–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?')) return;

            try {
                const response = await fetch(`/api/messages/${messageId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (result.success) {
                    showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', 'success');
                    loadMessages();
                } else {
                    showNotification(result.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è', 'error');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
            }
        }

        function editMessage(messageId) {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            showNotification('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ', 'info');
        }

        function replyToMessage(messageId) {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            showNotification('–û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã', 'info');
        }

        async function addReaction(messageId, emoji) {
            try {
                const response = await fetch(`/api/messages/${messageId}/react`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ emoji })
                });

                const result = await response.json();

                if (result.success) {
                    loadMessages();
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏:', error);
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        function toggleSearch() {
            showNotification('–ü–æ–∏—Å–∫ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω', 'info');
        }

        function showChannelSettings() {
            showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã', 'info');
        }

        function togglePinnedMessages() {
            showNotification('–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã', 'info');
        }

        function toggleEmojiPicker() {
            showNotification('–ü–∞–Ω–µ–ª—å —ç–º–æ–¥–∑–∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'info');
        }

        function attachFile() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*,video/*,audio/*,application/pdf';
            input.onchange = handleFileUpload;
            input.click();
        }

        async function handleFileUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            const formData = new FormData();
            formData.append('file', file);
            formData.append('channel_id', currentChannelId);

            try {
                showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...', 'info');

                const response = await fetch('/api/upload', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    showNotification('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!', 'success');
                    // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
                } else {
                    showNotification(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞', 'error');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
                showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞', 'error');
            }
        }

        function recordVoice() {
            showNotification('–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã', 'info');
        }

        function showUserSettings() {
            showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã', 'info');
        }

        function showThemeSelector() {
            showNotification('–í—ã–±–æ—Ä —Ç–µ–º —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω', 'info');
        }

        async function logout() {
            if (confirm('–í—ã–π—Ç–∏ –∏–∑ SafeGram?')) {
                try {
                    await fetch('/api/logout', { method: 'POST' });
                    window.location.href = '/';
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
                }
            }
        }
    </script>
</body>
</html>
    """, user=user, user_servers=user_servers, user_friends=user_friends)

print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞")


# ========================================================================
# –ú–ï–ì–ê –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ SafeGram 4.0 Ultimate Pro
# ========================================================================

@app.route('/admin')
def admin_panel():
    """–ú–ï–ì–ê –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å SafeGram 4.0"""
    user = SessionManager.get_current_user()
    if not user or not user.get('is_admin', False):
        return redirect('/login')

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
    users = load_json(USERS_JSON, [])
    messages = load_json(MESSAGES_JSON, [])
    servers = load_json(SERVERS_JSON, [])
    channels = load_json(CHANNELS_JSON, [])
    logs = load_json(LOGS_JSON, [])

    stats = {
        'total_users': len(users),
        'total_messages': len(messages),
        'total_servers': len(servers),
        'total_channels': len(channels),
        'online_users': len(UserManager.get_online_users()),
        'total_logs': len(logs),
        'uptime_hours': (time.time() - load_json(STATS_JSON, {}).get('uptime_start', time.time())) / 3600
    }

    return render_template_string("""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ú–ï–ì–ê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å SafeGram 4.0</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --bg-primary: #0a0a0f;
            --bg-secondary: #161620;
            --bg-tertiary: #1f1f2e;
            --text-primary: #ffffff;
            --text-secondary: #b8b8c6;
            --accent: #00d4ff;
            --success: #00ff88;
            --warning: #ffaa00;
            --danger: #ff4444;
            --border: #2a2a3a;
            --shadow: rgba(0, 0, 0, 0.4);
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            font-family: 'Segoe UI', -apple-system, BlinkMacSystemFont, system-ui, Arial;
            background: linear-gradient(135deg, var(--bg-primary), var(--bg-secondary), var(--bg-primary));
            color: var(--text-primary);
            min-height: 100vh;
            overflow-x: hidden;
        }

        body::before {
            content: '';
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: 
                radial-gradient(circle at 25% 25%, rgba(0, 212, 255, 0.1), transparent 50%),
                radial-gradient(circle at 75% 75%, rgba(0, 255, 136, 0.1), transparent 50%),
                radial-gradient(circle at 50% 50%, rgba(255, 170, 0, 0.05), transparent 50%);
            animation: adminFloat 15s ease-in-out infinite alternate;
            z-index: -1;
        }

        @keyframes adminFloat {
            from { transform: translate(0, 0) rotate(0deg); }
            to { transform: translate(-20px, -20px) rotate(1deg); }
        }

        .admin-container { display: flex; min-height: 100vh; }

        .admin-sidebar {
            width: 300px; background: linear-gradient(180deg, var(--bg-tertiary), rgba(31, 31, 46, 0.95));
            border-right: 2px solid var(--border);
            padding: 30px 0; position: fixed;
            height: 100vh; overflow-y: auto;
            box-shadow: 4px 0 25px var(--shadow);
            backdrop-filter: blur(15px);
        }

        .admin-header {
            padding: 0 30px 30px; border-bottom: 2px solid var(--border);
            margin-bottom: 30px; text-align: center;
        }

        .admin-header h1 {
            color: var(--accent); font-size: 2rem; font-weight: 900;
            text-shadow: 0 0 20px rgba(0, 212, 255, 0.8);
            animation: logoGlow 3s ease-in-out infinite alternate;
            margin-bottom: 10px; letter-spacing: 2px;
        }

        @keyframes logoGlow {
            from { text-shadow: 0 0 15px rgba(0, 212, 255, 0.8); }
            to { text-shadow: 0 0 35px rgba(0, 212, 255, 1); }
        }

        .admin-version {
            color: var(--text-secondary); font-size: 0.9rem; font-weight: 700;
            text-transform: uppercase; background: linear-gradient(45deg, var(--accent), var(--success));
            -webkit-background-clip: text; -webkit-text-fill-color: transparent;
        }

        .admin-menu { list-style: none; }
        .admin-menu-item { margin-bottom: 8px; }

        .admin-menu-item a {
            display: flex; align-items: center; padding: 18px 30px;
            color: var(--text-secondary); text-decoration: none;
            transition: all 0.3s ease; border-left: 4px solid transparent;
            font-weight: 600; cursor: pointer; font-size: 1rem;
        }

        .admin-menu-item a:hover {
            background: linear-gradient(90deg, rgba(0, 212, 255, 0.15), rgba(0, 212, 255, 0.05));
            color: var(--accent); border-left-color: var(--accent);
            transform: translateX(10px);
        }

        .admin-menu-item.active a {
            background: linear-gradient(90deg, rgba(0, 212, 255, 0.25), rgba(0, 212, 255, 0.1));
            color: var(--accent); border-left-color: var(--accent);
        }

        .admin-menu-icon {
            width: 28px; margin-right: 18px; text-align: center; font-size: 1.2rem;
        }

        .admin-main {
            margin-left: 300px; flex: 1; padding: 40px;
        }

        .admin-content-header {
            display: flex; justify-content: space-between; align-items: center;
            margin-bottom: 50px; padding: 30px 0; border-bottom: 2px solid var(--border);
        }

        .admin-content-header h2 {
            font-size: 2.5rem; font-weight: 800;
            background: linear-gradient(45deg, var(--accent), var(--success));
            -webkit-background-clip: text; -webkit-text-fill-color: transparent;
            letter-spacing: 1px;
        }

        .header-actions { display: flex; gap: 20px; }

        .admin-stats-grid {
            display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px; margin-bottom: 50px;
        }

        .admin-stat-card {
            background: linear-gradient(135deg, var(--bg-tertiary), rgba(31, 31, 46, 0.9));
            padding: 35px; border-radius: 20px; border: 1px solid var(--border);
            box-shadow: 0 10px 40px var(--shadow); transition: all 0.4s ease;
            position: relative; backdrop-filter: blur(15px);
        }

        .admin-stat-card:hover {
            transform: translateY(-12px) scale(1.02);
            box-shadow: 0 25px 70px rgba(0, 212, 255, 0.3);
            border-color: var(--accent);
        }

        .admin-stat-icon {
            font-size: 3.5rem; margin-bottom: 25px; display: block;
            filter: drop-shadow(0 0 15px currentColor);
        }

        .admin-stat-value {
            font-size: 3rem; font-weight: 900; margin-bottom: 15px;
            background: linear-gradient(45deg, var(--accent), #ffffff);
            -webkit-background-clip: text; -webkit-text-fill-color: transparent;
            animation: statPulse 3s ease-in-out infinite;
        }

        @keyframes statPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.08); }
        }

        .admin-stat-label {
            color: var(--text-secondary); font-size: 1.1rem; font-weight: 600;
            text-transform: uppercase; letter-spacing: 1px;
        }

        .admin-stat-change {
            position: absolute; top: 20px; right: 20px;
            font-size: 0.85rem; padding: 8px 15px;
            border-radius: 20px; font-weight: 700;
            background: rgba(0, 255, 136, 0.15); color: var(--success);
            border: 1px solid var(--success);
        }

        .btn-admin {
            padding: 15px 30px; border: none; border-radius: 12px;
            font-size: 1rem; font-weight: 700; cursor: pointer;
            transition: all 0.3s ease; text-decoration: none;
            display: inline-flex; align-items: center; gap: 12px;
            text-transform: uppercase; letter-spacing: 0.5px;
        }

        .btn-admin-primary {
            background: linear-gradient(135deg, var(--accent), #0099cc); color: white;
            box-shadow: 0 8px 25px rgba(0, 212, 255, 0.3);
        }

        .btn-admin-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(0, 212, 255, 0.5);
        }

        .btn-admin-success {
            background: linear-gradient(135deg, var(--success), #00cc66); color: white;
            box-shadow: 0 8px 25px rgba(0, 255, 136, 0.3);
        }

        .btn-admin-warning {
            background: linear-gradient(135deg, var(--warning), #ff8800); color: white;
        }

        .btn-admin-danger {
            background: linear-gradient(135deg, var(--danger), #cc0000); color: white;
        }

        .admin-table-container {
            background: linear-gradient(135deg, var(--bg-tertiary), rgba(31, 31, 46, 0.9));
            border-radius: 25px; padding: 40px; margin-bottom: 50px;
            border: 1px solid var(--border); box-shadow: 0 15px 50px var(--shadow);
            backdrop-filter: blur(15px);
        }

        .admin-table-container h3 {
            font-size: 1.8rem; font-weight: 800; margin-bottom: 35px;
            color: var(--accent); display: flex; align-items: center;
            gap: 15px; text-transform: uppercase; letter-spacing: 1px;
        }

        .admin-table { width: 100%; border-collapse: collapse; margin-top: 25px; }
        .admin-table th, .admin-table td { padding: 20px 18px; text-align: left; border-bottom: 1px solid var(--border); }

        .admin-table th {
            background: linear-gradient(135deg, var(--bg-secondary), rgba(22, 22, 32, 0.8));
            font-weight: 800; font-size: 0.9rem; color: var(--text-secondary);
            text-transform: uppercase; letter-spacing: 0.5px;
        }

        .admin-table tr:hover {
            background: rgba(0, 212, 255, 0.08);
            transform: translateX(8px);
        }

        .admin-badge {
            padding: 10px 18px; border-radius: 25px; font-size: 0.8rem;
            font-weight: 800; text-transform: uppercase; letter-spacing: 0.5px;
        }

        .admin-badge-success {
            background: rgba(0, 255, 136, 0.2); color: var(--success);
            border: 2px solid var(--success);
        }

        .admin-badge-warning {
            background: rgba(255, 170, 0, 0.2); color: var(--warning);
            border: 2px solid var(--warning);
        }

        .admin-badge-secondary {
            background: rgba(184, 184, 198, 0.2); color: var(--text-secondary);
            border: 2px solid var(--text-secondary);
        }

        .admin-alert {
            padding: 30px 35px; border-radius: 18px; margin-bottom: 40px;
            border-left: 6px solid; font-weight: 600; display: flex;
            align-items: center; gap: 25px; font-size: 1.1rem;
        }

        .admin-alert-success {
            background: rgba(0, 255, 136, 0.1); border-color: var(--success);
            color: var(--success);
        }

        .admin-alert i { font-size: 2rem; }

        .tabs-content { display: none; }
        .tabs-content.active { display: block; }

        @media (max-width: 768px) {
            .admin-sidebar { width: 100%; position: static; height: auto; }
            .admin-main { margin-left: 0; padding: 25px; }
            .admin-stats-grid { grid-template-columns: 1fr; }
        }
    </style>
</head>
<body>
    <div class="admin-container">
        <nav class="admin-sidebar">
            <div class="admin-header">
                <h1>üõ°Ô∏è –ú–ï–ì–ê –ê–î–ú–ò–ù–ö–ê</h1>
                <div class="admin-version">SafeGram 4.0 Ultimate Pro</div>
            </div>
            <ul class="admin-menu">
                <li class="admin-menu-item active">
                    <a href="#" onclick="showTab('dashboard')">
                        <i class="fas fa-rocket admin-menu-icon"></i>
                        –î–∞—à–±–æ—Ä–¥
                    </a>
                </li>
                <li class="admin-menu-item">
                    <a href="#" onclick="showTab('users')">
                        <i class="fas fa-users admin-menu-icon"></i>
                        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                    </a>
                </li>
                <li class="admin-menu-item">
                    <a href="#" onclick="showTab('servers')">
                        <i class="fas fa-server admin-menu-icon"></i>
                        –°–µ—Ä–≤–µ—Ä—ã
                    </a>
                </li>
                <li class="admin-menu-item">
                    <a href="#" onclick="showTab('messages')">
                        <i class="fas fa-comments admin-menu-icon"></i>
                        –°–æ–æ–±—â–µ–Ω–∏—è
                    </a>
                </li>
                <li class="admin-menu-item">
                    <a href="#" onclick="showTab('analytics')">
                        <i class="fas fa-chart-line admin-menu-icon"></i>
                        –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                    </a>
                </li>
                <li class="admin-menu-item">
                    <a href="#" onclick="showTab('security')">
                        <i class="fas fa-shield-alt admin-menu-icon"></i>
                        –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                    </a>
                </li>
                <li class="admin-menu-item">
                    <a href="#" onclick="showTab('system')">
                        <i class="fas fa-cog admin-menu-icon"></i>
                        –°–∏—Å—Ç–µ–º–∞
                    </a>
                </li>
            </ul>
        </nav>

        <main class="admin-main">
            <!-- –î–ê–®–ë–û–†–î -->
            <div id="dashboard" class="tabs-content active">
                <div class="admin-content-header">
                    <h2><i class="fas fa-rocket"></i> –ú–ï–ì–ê –î–∞—à–±–æ—Ä–¥</h2>
                    <div class="header-actions">
                        <button class="btn-admin btn-admin-primary" onclick="refreshStats()">
                            <i class="fas fa-sync-alt"></i> –û–±–Ω–æ–≤–∏—Ç—å
                        </button>
                        <a href="/app" class="btn-admin btn-admin-success">
                            <i class="fas fa-home"></i> –ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
                        </a>
                    </div>
                </div>

                <div class="admin-alert admin-alert-success">
                    <i class="fas fa-rocket"></i>
                    <div>
                        <strong>üéâ SafeGram 4.0 Ultimate Pro —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å!</strong><br>
                        –°–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ. –í—Å–µ –º–æ–¥—É–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.
                    </div>
                </div>

                <div class="admin-stats-grid">
                    <div class="admin-stat-card">
                        <i class="fas fa-users admin-stat-icon" style="color: var(--success);"></i>
                        <div class="admin-stat-value">{{ stats.total_users }}</div>
                        <div class="admin-stat-label">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                        <div class="admin-stat-change">+3 –Ω–æ–≤—ã—Ö</div>
                    </div>

                    <div class="admin-stat-card">
                        <i class="fas fa-comments admin-stat-icon" style="color: var(--accent);"></i>
                        <div class="admin-stat-value">{{ stats.total_messages }}</div>
                        <div class="admin-stat-label">–°–æ–æ–±—â–µ–Ω–∏–π</div>
                        <div class="admin-stat-change">+25 —Å–µ–≥–æ–¥–Ω—è</div>
                    </div>

                    <div class="admin-stat-card">
                        <i class="fas fa-server admin-stat-icon" style="color: var(--warning);"></i>
                        <div class="admin-stat-value">{{ stats.total_servers }}</div>
                        <div class="admin-stat-label">–°–µ—Ä–≤–µ—Ä–æ–≤</div>
                        <div class="admin-stat-change">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
                    </div>

                    <div class="admin-stat-card">
                        <i class="fas fa-circle admin-stat-icon" style="color: var(--success);"></i>
                        <div class="admin-stat-value">{{ stats.online_users }}</div>
                        <div class="admin-stat-label">–û–Ω–ª–∞–π–Ω</div>
                        <div class="admin-stat-change">–°–µ–π—á–∞—Å</div>
                    </div>

                    <div class="admin-stat-card">
                        <i class="fas fa-tachometer-alt admin-stat-icon" style="color: var(--accent);"></i>
                        <div class="admin-stat-value">{{ "%.1f"|format(stats.uptime_hours) }}—á</div>
                        <div class="admin-stat-label">–ê–ø—Ç–∞–π–º</div>
                        <div class="admin-stat-change">99.9%</div>
                    </div>

                    <div class="admin-stat-card">
                        <i class="fas fa-history admin-stat-icon" style="color: var(--warning);"></i>
                        <div class="admin-stat-value">{{ stats.total_logs }}</div>
                        <div class="admin-stat-label">–õ–æ–≥–æ–≤</div>
                        <div class="admin-stat-change">–°–æ–±—ã—Ç–∏—è</div>
                    </div>
                </div>

                <div class="admin-table-container">
                    <h3><i class="fas fa-bolt"></i> –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 25px; margin-top: 30px;">
                        <button class="btn-admin btn-admin-primary" onclick="createBackup()">
                            <i class="fas fa-download"></i> –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
                        </button>
                        <button class="btn-admin btn-admin-success" onclick="exportData()">
                            <i class="fas fa-file-export"></i> –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                        </button>
                        <button class="btn-admin btn-admin-warning" onclick="maintenanceMode()">
                            <i class="fas fa-tools"></i> –¢–µ—Ö. –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
                        </button>
                        <button class="btn-admin btn-admin-danger" onclick="clearLogs()">
                            <i class="fas fa-trash"></i> –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
                        </button>
                    </div>
                </div>
            </div>

            <!-- –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò -->
            <div id="users" class="tabs-content">
                <div class="admin-content-header">
                    <h2><i class="fas fa-users"></i> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h2>
                </div>

                <div class="admin-stats-grid">
                    <div class="admin-stat-card">
                        <i class="fas fa-user-plus admin-stat-icon" style="color: var(--success);"></i>
                        <div class="admin-stat-value">{{ stats.total_users }}</div>
                        <div class="admin-stat-label">–í—Å–µ–≥–æ</div>
                    </div>
                    <div class="admin-stat-card">
                        <i class="fas fa-user-check admin-stat-icon" style="color: var(--accent);"></i>
                        <div class="admin-stat-value">{{ stats.online_users }}</div>
                        <div class="admin-stat-label">–û–Ω–ª–∞–π–Ω</div>
                    </div>
                    <div class="admin-stat-card">
                        <i class="fas fa-user-times admin-stat-icon" style="color: var(--danger);"></i>
                        <div class="admin-stat-value">0</div>
                        <div class="admin-stat-label">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö</div>
                    </div>
                </div>

                <div class="admin-table-container">
                    <h3><i class="fas fa-users"></i> –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                    <table class="admin-table">
                        <thead>
                            <tr>
                                <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
                                <th>Email</th>
                                <th>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</th>
                                <th>–°—Ç–∞—Ç—É—Å</th>
                                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                            </tr>
                        </thead>
                        <tbody id="usersTableBody">
                            <!-- –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ JS -->
                            <tr>
                                <td><strong>System Bot</strong></td>
                                <td>system@safegram.local</td>
                                <td>{{ datetime.now().strftime('%d.%m.%Y') }}</td>
                                <td><span class="admin-badge admin-badge-success">–ê–∫—Ç–∏–≤–µ–Ω</span></td>
                                <td>
                                    <button class="btn-admin btn-admin-primary" style="padding: 8px 15px; font-size: 0.8rem;">
                                        <i class="fas fa-eye"></i> –ü—Ä–æ—Å–º–æ—Ç—Ä
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- –°–ï–†–í–ï–†–´ -->
            <div id="servers" class="tabs-content">
                <div class="admin-content-header">
                    <h2><i class="fas fa-server"></i> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏</h2>
                </div>

                <div class="admin-stats-grid">
                    <div class="admin-stat-card">
                        <i class="fas fa-server admin-stat-icon" style="color: var(--accent);"></i>
                        <div class="admin-stat-value">{{ stats.total_servers }}</div>
                        <div class="admin-stat-label">–°–µ—Ä–≤–µ—Ä–æ–≤</div>
                    </div>
                    <div class="admin-stat-card">
                        <i class="fas fa-hashtag admin-stat-icon" style="color: var(--success);"></i>
                        <div class="admin-stat-value">{{ stats.total_channels }}</div>
                        <div class="admin-stat-label">–ö–∞–Ω–∞–ª–æ–≤</div>
                    </div>
                </div>

                <div class="admin-table-container">
                    <h3><i class="fas fa-server"></i> –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã</h3>
                    <table class="admin-table">
                        <thead>
                            <tr>
                                <th>–°–µ—Ä–≤–µ—Ä</th>
                                <th>–í–ª–∞–¥–µ–ª–µ—Ü</th>
                                <th>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤</th>
                                <th>–ö–∞–Ω–∞–ª–æ–≤</th>
                                <th>–°–æ–∑–¥–∞–Ω</th>
                                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><strong>üè† SafeGram Community</strong></td>
                                <td>System</td>
                                <td>{{ stats.total_users }}</td>
                                <td>{{ stats.total_channels }}</td>
                                <td>{{ datetime.now().strftime('%d.%m.%Y') }}</td>
                                <td>
                                    <button class="btn-admin btn-admin-primary" style="padding: 8px 15px; font-size: 0.8rem;">
                                        <i class="fas fa-cog"></i> –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- –°–û–û–ë–©–ï–ù–ò–Ø -->
            <div id="messages" class="tabs-content">
                <div class="admin-content-header">
                    <h2><i class="fas fa-comments"></i> –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π</h2>
                </div>

                <div class="admin-stats-grid">
                    <div class="admin-stat-card">
                        <i class="fas fa-comment admin-stat-icon" style="color: var(--accent);"></i>
                        <div class="admin-stat-value">{{ stats.total_messages }}</div>
                        <div class="admin-stat-label">–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</div>
                    </div>
                    <div class="admin-stat-card">
                        <i class="fas fa-exclamation-triangle admin-stat-icon" style="color: var(--warning);"></i>
                        <div class="admin-stat-value">0</div>
                        <div class="admin-stat-label">–ñ–∞–ª–æ–±</div>
                    </div>
                    <div class="admin-stat-card">
                        <i class="fas fa-ban admin-stat-icon" style="color: var(--danger);"></i>
                        <div class="admin-stat-value">0</div>
                        <div class="admin-stat-label">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö</div>
                    </div>
                </div>

                <div class="admin-table-container">
                    <h3><i class="fas fa-comments"></i> –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</h3>
                    <table class="admin-table">
                        <thead>
                            <tr>
                                <th>–í—Ä–µ–º—è</th>
                                <th>–ê–≤—Ç–æ—Ä</th>
                                <th>–ö–∞–Ω–∞–ª</th>
                                <th>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ</th>
                                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                            </tr>
                        </thead>
                        <tbody id="messagesTableBody">
                            <tr>
                                <td>{{ datetime.now().strftime('%H:%M') }}</td>
                                <td><strong>AI Assistant</strong></td>
                                <td>#–æ–±—â–∏–π</td>
                                <td>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SafeGram 4.0!</td>
                                <td>
                                    <button class="btn-admin btn-admin-danger" style="padding: 6px 12px; font-size: 0.8rem;" onclick="deleteMessage('demo')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- –ê–ù–ê–õ–ò–¢–ò–ö–ê -->
            <div id="analytics" class="tabs-content">
                <div class="admin-content-header">
                    <h2><i class="fas fa-chart-line"></i> –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h2>
                </div>

                <div class="admin-stats-grid">
                    <div class="admin-stat-card">
                        <i class="fas fa-chart-bar admin-stat-icon" style="color: var(--success);"></i>
                        <div class="admin-stat-value">+35%</div>
                        <div class="admin-stat-label">–†–æ—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</div>
                    </div>
                    <div class="admin-stat-card">
                        <i class="fas fa-clock admin-stat-icon" style="color: var(--accent);"></i>
                        <div class="admin-stat-value">18–º–∏–Ω</div>
                        <div class="admin-stat-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏</div>
                    </div>
                    <div class="admin-stat-card">
                        <i class="fas fa-mobile admin-stat-icon" style="color: var(--warning);"></i>
                        <div class="admin-stat-value">72%</div>
                        <div class="admin-stat-label">–ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</div>
                    </div>
                </div>

                <div class="admin-table-container">
                    <h3><i class="fas fa-chart-pie"></i> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 40px; margin-top: 30px;">
                        <div>
                            <h4 style="color: var(--accent); margin-bottom: 20px; font-size: 1.3rem;">üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º</h4>
                            <div style="background: rgba(0,212,255,0.1); padding: 25px; border-radius: 15px; border: 1px solid var(--accent);">
                                <div style="margin-bottom: 15px; font-size: 1.1rem;"><strong>09:00-12:00:</strong> 38%</div>
                                <div style="margin-bottom: 15px; font-size: 1.1rem;"><strong>12:00-15:00:</strong> 31%</div>
                                <div style="margin-bottom: 15px; font-size: 1.1rem;"><strong>15:00-18:00:</strong> 22%</div>
                                <div style="font-size: 1.1rem;"><strong>18:00-21:00:</strong> 9%</div>
                            </div>
                        </div>
                        <div>
                            <h4 style="color: var(--success); margin-bottom: 20px; font-size: 1.3rem;">üè† –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞–Ω–∞–ª—ã</h4>
                            <div style="background: rgba(0,255,136,0.1); padding: 25px; border-radius: 15px; border: 1px solid var(--success);">
                                <div style="margin-bottom: 15px; font-size: 1.1rem;"><strong>#–æ–±—â–∏–π:</strong> 73%</div>
                                <div style="margin-bottom: 15px; font-size: 1.1rem;"><strong>#—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</strong> 16%</div>
                                <div style="margin-bottom: 15px; font-size: 1.1rem;"><strong>#—Å–ª—É—á–∞–π–Ω–æ–µ:</strong> 8%</div>
                                <div style="font-size: 1.1rem;"><strong>–ì–æ–ª–æ—Å–æ–≤—ã–µ:</strong> 3%</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ -->
            <div id="security" class="tabs-content">
                <div class="admin-content-header">
                    <h2><i class="fas fa-shield-alt"></i> –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h2>
                </div>

                <div class="admin-stats-grid">
                    <div class="admin-stat-card">
                        <i class="fas fa-lock admin-stat-icon" style="color: var(--success);"></i>
                        <div class="admin-stat-value">100%</div>
                        <div class="admin-stat-label">–ó–∞—â–∏—â–µ–Ω–Ω–æ—Å—Ç—å</div>
                    </div>
                    <div class="admin-stat-card">
                        <i class="fas fa-shield-virus admin-stat-icon" style="color: var(--success);"></i>
                        <div class="admin-stat-value">0</div>
                        <div class="admin-stat-label">–£–≥—Ä–æ–∑</div>
                    </div>
                    <div class="admin-stat-card">
                        <i class="fas fa-key admin-stat-icon" style="color: var(--accent);"></i>
                        <div class="admin-stat-value">256</div>
                        <div class="admin-stat-label">–ë–∏—Ç–Ω–æ—Å—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è</div>
                    </div>
                </div>

                <div class="admin-table-container">
                    <h3><i class="fas fa-history"></i> –ñ—É—Ä–Ω–∞–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h3>
                    <table class="admin-table">
                        <thead>
                            <tr>
                                <th>–í—Ä–µ–º—è</th>
                                <th>–°–æ–±—ã—Ç–∏–µ</th>
                                <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
                                <th>IP –∞–¥—Ä–µ—Å</th>
                                <th>–°—Ç–∞—Ç—É—Å</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>{{ datetime.now().strftime('%H:%M:%S') }}</td>
                                <td>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–π –≤—Ö–æ–¥</td>
                                <td>Admin</td>
                                <td>127.0.0.1</td>
                                <td><span class="admin-badge admin-badge-success">–£—Å–ø–µ—à–Ω–æ</span></td>
                            </tr>
                            <tr>
                                <td>{{ datetime.now().strftime('%H:%M:%S') }}</td>
                                <td>–°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</td>
                                <td>System</td>
                                <td>localhost</td>
                                <td><span class="admin-badge admin-badge-success">–ê–∫—Ç–∏–≤–µ–Ω</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- –°–ò–°–¢–ï–ú–ê -->
            <div id="system" class="tabs-content">
                <div class="admin-content-header">
                    <h2><i class="fas fa-cog"></i> –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
                </div>

                <div class="admin-stats-grid">
                    <div class="admin-stat-card">
                        <i class="fas fa-microchip admin-stat-icon" style="color: var(--success);"></i>
                        <div class="admin-stat-value">2.4GB</div>
                        <div class="admin-stat-label">–ü–∞–º—è—Ç—å</div>
                    </div>
                    <div class="admin-stat-card">
                        <i class="fas fa-hdd admin-stat-icon" style="color: var(--warning);"></i>
                        <div class="admin-stat-value">52%</div>
                        <div class="admin-stat-label">–î–∏—Å–∫</div>
                    </div>
                    <div class="admin-stat-card">
                        <i class="fas fa-tachometer-alt admin-stat-icon" style="color: var(--accent);"></i>
                        <div class="admin-stat-value">8ms</div>
                        <div class="admin-stat-label">–û—Ç–∫–ª–∏–∫</div>
                    </div>
                </div>

                <div class="admin-table-container">
                    <h3><i class="fas fa-tools"></i> –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 40px; margin-top: 30px;">
                        <div>
                            <h4 style="color: var(--accent); margin-bottom: 20px; font-size: 1.3rem;">‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
                            <div style="background: rgba(0,212,255,0.1); padding: 25px; border-radius: 15px;">
                                <div style="margin-bottom: 15px;">
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</label>
                                    <input type="checkbox" checked> –†–∞–∑—Ä–µ—à–µ–Ω–∞
                                </div>
                                <div style="margin-bottom: 15px;">
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤:</label>
                                    <input type="checkbox" checked> –í–∫–ª—é—á–µ–Ω–æ
                                </div>
                                <div style="margin-bottom: 20px;">
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:</label>
                                    <input type="checkbox"> –û—Ç–∫–ª—é—á–µ–Ω
                                </div>
                                <button class="btn-admin btn-admin-primary" onclick="saveSystemSettings()">
                                    <i class="fas fa-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                                </button>
                            </div>
                        </div>
                        <div>
                            <h4 style="color: var(--success); margin-bottom: 20px; font-size: 1.3rem;">üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏</h4>
                            <div style="background: rgba(0,255,136,0.1); padding: 25px; border-radius: 15px;">
                                <button class="btn-admin btn-admin-success" style="width: 100%; margin-bottom: 15px;" onclick="exportAllData()">
                                    <i class="fas fa-download"></i> –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                                </button>
                                <button class="btn-admin btn-admin-warning" style="width: 100%; margin-bottom: 15px;" onclick="importData()">
                                    <i class="fas fa-upload"></i> –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                                </button>
                                <button class="btn-admin btn-admin-primary" style="width: 100%; margin-bottom: 15px;" onclick="optimizeDatabase()">
                                    <i class="fas fa-database"></i> –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î
                                </button>
                                <button class="btn-admin btn-admin-danger" style="width: 100%;" onclick="resetSystem()">
                                    <i class="fas fa-exclamation-triangle"></i> –°–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∞–º–∏
        function showTab(tabName) {
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
            document.querySelectorAll('.tabs-content').forEach(tab => {
                tab.classList.remove('active');
            });

            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –º–µ–Ω—é
            document.querySelectorAll('.admin-menu-item').forEach(item => {
                item.classList.remove('active');
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            document.getElementById(tabName).classList.add('active');

            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –º–µ–Ω—é
            event.target.closest('.admin-menu-item').classList.add('active');
        }

        // –§—É–Ω–∫—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
        async function refreshStats() {
            showAdminNotification('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...', 'info');

            try {
                const response = await fetch('/api/stats');
                const result = await response.json();

                if (result.success) {
                    showAdminNotification('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
                    setTimeout(() => location.reload(), 1000);
                }
            } catch (error) {
                showAdminNotification('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'error');
            }
        }

        function createBackup() {
            if (confirm('–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å–∏—Å—Ç–µ–º—ã?')) {
                showAdminNotification('üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...', 'info');
                setTimeout(() => {
                    showAdminNotification('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
                }, 2000);
            }
        }

        function exportData() {
            showAdminNotification('üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω', 'info');
            setTimeout(() => {
                showAdminNotification('‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
            }, 1500);
        }

        function exportAllData() {
            if (confirm('–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã?')) {
                showAdminNotification('üìã –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...', 'info');
                setTimeout(() => {
                    showAdminNotification('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
                }, 3000);
            }
        }

        function maintenanceMode() {
            if (confirm('–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è?')) {
                showAdminNotification('üîß –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', 'warning');
            }
        }

        function clearLogs() {
            if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏?')) {
                showAdminNotification('üóëÔ∏è –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã', 'success');
            }
        }

        function deleteMessage(messageId) {
            if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?')) {
                showAdminNotification('üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', 'success');
            }
        }

        function saveSystemSettings() {
            showAdminNotification('üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        }

        function importData() {
            showAdminNotification('üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', 'info');
        }

        function optimizeDatabase() {
            if (confirm('–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?')) {
                showAdminNotification('‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', 'info');
                setTimeout(() => {
                    showAdminNotification('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'success');
                }, 2500);
            }
        }

        function resetSystem() {
            if (confirm('–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–æ—Å–∏—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
                if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!')) {
                    showAdminNotification('‚ö†Ô∏è –°–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω', 'warning');
                }
            }
        }

        function showAdminNotification(message, type) {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed; top: 30px; right: 30px; z-index: 10000;
                background: ${type === 'success' ? 'var(--success)' : type === 'error' ? 'var(--danger)' : type === 'warning' ? 'var(--warning)' : 'var(--accent)'};
                color: white; padding: 20px 25px; border-radius: 12px;
                font-weight: 600; box-shadow: 0 10px 40px rgba(0,0,0,0.4);
                transform: translateX(100%); transition: transform 0.5s ease;
                max-width: 350px; font-size: 1rem;
            `;
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => notification.style.transform = 'translateX(0)', 100);
            setTimeout(() => {
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => notification.remove(), 500);
            }, 3500);
        }

        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            document.querySelectorAll('.admin-stat-value').forEach((el, index) => {
                el.style.transform = 'scale(1.1)';
                setTimeout(() => el.style.transform = 'scale(1)', 200);
            });
        }, 30000);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω–∫–∏
        document.addEventListener('DOMContentLoaded', () => {
            showAdminNotification('üõ°Ô∏è –ú–ï–ì–ê –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å SafeGram 4.0 –∑–∞–≥—Ä—É–∂–µ–Ω–∞!', 'success');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            loadUsersData();
            loadMessagesData();
        });

        async function loadUsersData() {
            try {
                const response = await fetch('/api/admin/users');
                const result = await response.json();

                if (result.success && result.users) {
                    const tbody = document.getElementById('usersTableBody');
                    const userRows = result.users.slice(0, 10).map(user => `
                        <tr>
                            <td><strong>${user.username}</strong></td>
                            <td>${user.email}</td>
                            <td>${new Date(user.created_at * 1000).toLocaleDateString('ru')}</td>
                            <td><span class="admin-badge admin-badge-success">–ê–∫—Ç–∏–≤–µ–Ω</span></td>
                            <td>
                                <button class="btn-admin btn-admin-primary" style="padding: 8px 15px; font-size: 0.8rem;">
                                    <i class="fas fa-eye"></i> –ü—Ä–æ—Å–º–æ—Ç—Ä
                                </button>
                            </td>
                        </tr>
                    `).join('');

                    if (tbody) tbody.innerHTML = userRows;
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            }
        }

        async function loadMessagesData() {
            // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            // –í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        }
    </script>
</body>
</html>
    """, stats=stats, datetime=datetime)

# ========================================================================
# SOCKETIO –°–û–ë–´–¢–ò–Ø - REAL-TIME –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨
# ========================================================================

@socketio.on('connect')
def handle_connect():
    print(f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {request.sid}")
    emit('status', {'msg': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'})

@socketio.on('disconnect') 
def handle_disconnect():
    print(f"üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {request.sid}")

@socketio.on('join_channel')
def handle_join_channel(data):
    channel_id = data.get('channel_id')
    if channel_id:
        join_room(channel_id)
        emit('channel_joined', {'channel_id': channel_id})
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É: {channel_id}")

@socketio.on('leave_channel')
def handle_leave_channel(data):
    channel_id = data.get('channel_id')
    if channel_id:
        leave_room(channel_id)
        print(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª: {channel_id}")

@socketio.on('send_message')
def handle_send_message(data):
    try:
        user = get_current_user()
        if not user:
            emit('error', {'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'})
            return
        
        channel_id = data.get('channel_id')
        content = data.get('content', '').strip()
        
        if not channel_id or not content:
            emit('error', {'message': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'})
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–æ–≤
        bot_response = process_bot_command(content, user['id'], channel_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = MessageManager.send_message(channel_id, user['id'], content)
        
        if result['success']:
            message = result['message']
            message['author'] = {
                'id': user['id'],
                'username': user['username'],
                'avatar': user.get('avatar', ''),
                'is_guest': user.get('is_guest', False)
            }
            
            socketio.emit('new_message', message, room=channel_id)
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel_id}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            if bot_response:
                def send_bot_response():
                    time.sleep(1)
                    bot_message = {
                        "id": generate_id("msg_"),
                        "channel_id": channel_id,
                        "author_id": "bot",
                        "content": bot_response,
                        "type": "bot",
                        "created_at": time.time(),
                        "author": {
                            'id': 'bot',
                            'username': 'SafeGram Bot',
                            'avatar': 'ü§ñ',
                            'is_guest': False
                        }
                    }
                    socketio.emit('new_message', bot_message, room=channel_id)
                
                threading.Thread(target=send_bot_response, daemon=True).start()
        else:
            emit('error', {'message': result['error']})
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        emit('error', {'message': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'})

def process_bot_command(content, user_id, channel_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–æ–≤"""
    if not content.startswith('!'):
        return None
    
    command = content.split().lower()
    
    if command == "!dice":
        import random
        result = random.randint(1, 6)
        return f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: **{result}**"
    
    elif command == "!coin":
        import random
        result = random.choice(["–û—Ä—ë–ª", "–†–µ—à–∫–∞"])
        return f"ü™ô –†–µ–∑—É–ª—å—Ç–∞—Ç: **{result}**"
    
    elif command == "!help":
        return """ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `!dice` - –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
‚Ä¢ `!coin` - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
‚Ä¢ `!help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `!time` - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
    
    elif command == "!time":
        current_time = datetime.now().strftime("%H:%M:%S %d.%m.%Y")
        return f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: **{current_time}**"
    
    return None

print("‚úÖ SocketIO —Å–æ–±—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")


# ========================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–•
# ========================================================================

def initialize_default_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if not os.path.exists(STATS_JSON):
        save_json(STATS_JSON, {
            "uptime_start": time.time(),
            "total_users": 0,
            "total_messages": 0,
            "peak_online": 0
        })
    
    # –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    servers = load_json(SERVERS_JSON, [])
    if not any(s['id'] == 'server_main' for s in servers):
        main_server = {
            "id": "server_main",
            "name": "üè† SafeGram Community",
            "description": "–ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä SafeGram",
            "owner_id": "system",
            "created_at": time.time(),
            "members": ["system"],
            "public": True
        }
        servers.append(main_server)
        save_json(SERVERS_JSON, servers)
    
    # –ö–∞–Ω–∞–ª—ã
    channels = load_json(CHANNELS_JSON, [])
    if not channels:
        default_channels = [
            {
                "id": generate_id("ch_"),
                "server_id": "server_main",
                "name": "üëã –¥–æ–±—Ä–æ-–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
                "type": "text",
                "topic": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SafeGram!",
                "position": 1,
                "created_at": time.time()
            },
            {
                "id": generate_id("ch_"),
                "server_id": "server_main",
                "name": "üí¨ –æ–±—â–∏–π-—á–∞—Ç",
                "type": "text",
                "topic": "–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—â–µ–Ω–∏—è",
                "position": 2,
                "created_at": time.time()
            },
            {
                "id": generate_id("ch_"),
                "server_id": "server_main",
                "name": "üéÆ –∏–≥—Ä—ã",
                "type": "text",
                "topic": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∏–≥—Ä",
                "position": 3,
                "created_at": time.time()
            },
            {
                "id": generate_id("ch_"),
                "server_id": "server_main",
                "name": "üîä –≥–æ–ª–æ—Å–æ–≤–æ–π",
                "type": "voice",
                "topic": "–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ",
                "position": 4,
                "created_at": time.time()
            }
        ]
        save_json(CHANNELS_JSON, default_channels)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = []
        for i, message_content in enumerate([
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SafeGram 4.0 Ultimate Pro!",
            "üí¨ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è –≤ real-time —Ä–µ–∂–∏–º–µ",
            "ü§ñ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–æ–≤: !dice, !coin, !help"
        ]):
            message = {
                "id": generate_id("msg_"),
                "channel_id": default_channels['id'],
                "server_id": "server_main",
                "author_id": "system",
                "author_name": "SafeGram Bot",
                "content": message_content,
                "type": "system",
                "created_at": time.time() + i,
                "reactions": {},
                "attachments": []
            }
            messages.append(message)
        
        save_json(MESSAGES_JSON, messages)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initialize_default_data()

print("‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

# ========================================================================
# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø - SafeGram 5.0 Ultimate Pro+ Edition
# ========================================================================

import webbrowser
import platform
import psutil
import subprocess
from datetime import datetime

# ========================================================================
# –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò –ò –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–¶–ï–°–°–´
# ========================================================================

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π
def cleanup_sessions_periodically():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π"""
    import threading
    import time

    def cleanup_worker():
        while True:
            try:
                SessionManager.cleanup_expired_sessions()
                time.sleep(3600)  # –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
                log_info("–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π")
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {e}")

    cleanup_thread = threading.Thread(target=cleanup_worker, daemon=True)
    cleanup_thread.start()
    print("‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π")

def update_user_activity_periodically():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    import threading
    import time

    def activity_worker():
        while True:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                current_time = time.time()
                sessions = load_json(SESSIONS_JSON, {})
                
                online_count = 0
                for session_token, session_data in sessions.items():
                    if current_time - session_data.get('last_activity', 0) < ONLINE_TIMEOUT:
                        online_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = load_json(STATS_JSON, {})
                stats['online_users'] = online_count
                stats['last_activity_update'] = current_time
                save_json(STATS_JSON, stats)
                
                time.sleep(300)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

    activity_thread = threading.Thread(target=activity_worker, daemon=True)
    activity_thread.start()
    print("‚úÖ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

def backup_data_periodically():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    import threading
    import time
    import shutil
    from datetime import datetime

    def backup_worker():
        while True:
            try:
                time.sleep(86400)  # –ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–∞
                backup_timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_folder = os.path.join(BACKUP_DIR, f"backup_{backup_timestamp}")
                os.makedirs(backup_folder, exist_ok=True)
                
                # –ö–æ–ø–∏—Ä—É–µ–º JSON —Ñ–∞–π–ª—ã
                json_files = [
                    USERS_JSON, MESSAGES_JSON, CHANNELS_JSON, SERVERS_JSON,
                    FRIENDS_JSON, BOTS_JSON, THEMES_JSON, ACHIEVEMENTS_JSON,
                    SETTINGS_JSON, STATS_JSON, SESSIONS_JSON, LOGS_JSON,
                    NOTIFICATIONS_JSON, FILE_STORAGE_JSON
                ]
                
                for json_file in json_files:
                    if os.path.exists(json_file):
                        filename = os.path.basename(json_file)
                        shutil.copy2(json_file, os.path.join(backup_folder, filename))
                
                # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
                archive_path = os.path.join(BACKUP_DIR, f"safegram_backup_{backup_timestamp}.zip")
                shutil.make_archive(archive_path.replace('.zip', ''), 'zip', backup_folder)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                shutil.rmtree(backup_folder)
                
                log_info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {archive_path}")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7)
                backup_files = [f for f in os.listdir(BACKUP_DIR) if f.startswith('safegram_backup_')]
                backup_files.sort()
                
                while len(backup_files) > 7:
                    old_backup = backup_files.pop(0)
                    old_backup_path = os.path.join(BACKUP_DIR, old_backup)
                    try:
                        os.remove(old_backup_path)
                    except:
                        pass
                
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")

    backup_thread = threading.Thread(target=backup_worker, daemon=True)
    backup_thread.start()
    print("‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")

def monitor_system_health():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    import threading
    import time
    import psutil

    def health_worker():
        while True:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
                cpu_percent = psutil.cpu_percent(interval=1)
                memory = psutil.virtual_memory()
                disk = psutil.disk_usage('/')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                health_data = {
                    "timestamp": time.time(),
                    "cpu_percent": cpu_percent,
                    "memory_percent": memory.percent,
                    "memory_used_gb": memory.used / (1024**3),
                    "disk_percent": disk.percent,
                    "disk_free_gb": disk.free / (1024**3)
                }
                
                # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                if cpu_percent > 90:
                    log_error(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent}%")
                
                if memory.percent > 90:
                    log_error(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏: {memory.percent}%")
                
                if disk.percent > 95:
                    log_error(f"‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {disk.percent}%")
                
                time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")

    health_thread = threading.Thread(target=health_worker, daemon=True)
    health_thread.start()
    print("‚úÖ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")

def process_scheduled_notifications():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    import threading
    import time

    def notification_worker():
        while True:
            try:
                # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                # –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç.–¥.
                
                current_time = time.time()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                if int(current_time) % 86400 == 0:  # –ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
                    NotificationManager.send_notification(
                        "admin",
                        "üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç",
                        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SafeGram –∑–∞ —Å–µ–≥–æ–¥–Ω—è –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É",
                        "daily_report"
                    )
                
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    notification_thread = threading.Thread(target=notification_worker, daemon=True)
    notification_thread.start()
    print("‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

def update_bot_activities():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤"""
    import threading
    import time

    def bot_worker():
        while True:
            try:
                bots = load_json(BOTS_JSON, [])
                current_time = time.time()
                
                for bot in bots:
                    if bot['status'] == 'online':
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
                        if 'last_started' in bot:
                            uptime = current_time - bot['last_started']
                            bot['statistics']['uptime'] = int(uptime)
                        
                        # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –±–æ—Ç–∞ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å)
                        if bot.get('settings', {}).get('auto_response', False):
                            if int(current_time) % 1800 == 0:  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                                print(f"ü§ñ –ë–æ—Ç {bot['name']} –∞–∫—Ç–∏–≤–µ–Ω")
                
                save_json(BOTS_JSON, bots)
                time.sleep(300)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤: {e}")

    bot_thread = threading.Thread(target=bot_worker, daemon=True)
    bot_thread.start()
    print("‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤")

# ========================================================================
# –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
# ========================================================================

def get_system_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        info = {
            "platform": platform.system(),
            "platform_release": platform.release(),
            "platform_version": platform.version(),
            "architecture": platform.machine(),
            "hostname": platform.node(),
            "processor": platform.processor(),
            "python_version": platform.python_version(),
            "cpu_count": psutil.cpu_count(),
            "memory_total": psutil.virtual_memory().total / (1024**3),  # GB
            "disk_total": psutil.disk_usage('/').total / (1024**3),  # GB
        }
        return info
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return {}

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_packages = [
        'flask', 'psutil', 'pillow', 'requests'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install " + " ".join(missing_packages))
        return False
    
    return True

def perform_startup_checks():
    try:
        import PIL
    except ImportError:
        print("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞–∫–µ—Ç pillow")
        return False
    # –î—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
    try:
        test_file = os.path.join(DATA_DIR, "test_write.tmp")
        with open(test_file, 'w') as f:
            f.write("test")
        os.remove(test_file)
        print("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
    except Exception as e:
        print(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ {DATA_DIR}: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    import socket
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('localhost', APP_PORT))
        sock.close()
        
        if result == 0:
            print(f"‚ö†Ô∏è –ü–æ—Ä—Ç {APP_PORT} —É–∂–µ –∑–∞–Ω—è—Ç")
            return False
        else:
            print(f"‚úÖ –ü–æ—Ä—Ç {APP_PORT} –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ JSON —Ñ–∞–π–ª–æ–≤
    critical_files = [USERS_JSON, MESSAGES_JSON, SERVERS_JSON]
    for file_path in critical_files:
        if os.path.exists(file_path):
            try:
                load_json(file_path)
                print(f"‚úÖ {os.path.basename(file_path)} - OK")
            except Exception as e:
                print(f"‚ùå –ü–æ–≤—Ä–µ–∂–¥–µ–Ω —Ñ–∞–π–ª {os.path.basename(file_path)}: {e}")
                return False
    
    print("‚úÖ –í—Å–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
    return True

# ========================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
# ========================================================================

def create_default_admin():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    users = load_json(USERS_JSON, [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    admin_exists = any(u.get('is_admin', False) for u in users)
    
    if not admin_exists:
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_user = {
            "id": "admin",
            "username": "Administrator",
            "email": "admin@safegram.local",
            "password_hash": hash_password("panel"),
            "avatar": "üëë",
            "status": "online",
            "created_at": time.time(),
            "last_seen": time.time(),
            "is_admin": True,
            "level": 999,
            "experience": 999999,
            "achievements": ["system_creator"],
            "settings": {
                "show_online_status": True,
                "allow_friend_requests": False,
                "notifications": True
            },
            "permissions": {
                "manage_users": True,
                "manage_servers": True,
                "manage_bots": True,
                "view_analytics": True,
                "system_admin": True
            }
        }
        
        users.append(admin_user)
        save_json(USERS_JSON, users)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        print("   Email: admin@safegram.local")
        print("   –ü–∞—Ä–æ–ª—å: panel")
    else:
        print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

# ========================================================================
# –ê–í–¢–û–ó–ê–ü–£–°–ö –ë–†–ê–£–ó–ï–†–ê
# ========================================================================

def open_browser_delayed():
    """–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
    import threading
    import time
    
    def browser_opener():
        time.sleep(3)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        try:
            webbrowser.open(f'http://localhost:{APP_PORT}')
            print(f"üåê –û—Ç–∫—Ä—ã—Ç –±—Ä–∞—É–∑–µ—Ä: http://localhost:{APP_PORT}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}")
    
    browser_thread = threading.Thread(target=browser_opener, daemon=True)
    browser_thread.start()

# ========================================================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê
# ========================================================================

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
if __name__ == '__main__':
    # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    os.system('cls' if os.name == 'nt' else 'clear')
    
    print("=" * 90)
    print("üöÄ –ó–ê–ü–£–°–ö SafeGram 5.0 Ultimate Pro+ Edition")
    print("=" * 90)
    print()
    print("üåü –û–ì–†–û–ú–ù–´–ô –ú–ï–°–°–ï–ù–î–ñ–ï–† - –ö–û–ù–ö–£–†–ï–ù–¢ DISCORD, TELEGRAM –ò WHATSAPP!")
    print()
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    system_info = get_system_info()
    print("üíª –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
    print(f"   üñ•Ô∏è  –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {system_info.get('platform', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {system_info.get('platform_release', '')}")
    print(f"   üêç Python: {system_info.get('python_version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"   üß† –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {system_info.get('processor', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"   üíæ –û–ó–£: {system_info.get('memory_total', 0):.1f} GB")
    print(f"   üíø –î–∏—Å–∫: {system_info.get('disk_total', 0):.1f} GB")
    print()
    
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê:")
    file_size = os.path.getsize(__file__)
    print(f"   üìù –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç ({file_size / 1024 / 1024:.2f} MB)")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
    try:
        with open(__file__, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            code_lines = sum(1 for line in lines if line.strip() and not line.strip().startswith('#'))
            total_lines = len(lines)
            comment_lines = sum(1 for line in lines if line.strip().startswith('#'))
            
        print(f"   üìà –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {total_lines:,}")
        print(f"   üíª –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {code_lines:,}")
        print(f"   üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comment_lines:,}")
    except:
        print(f"   üìà –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ~{file_size // 45:,} (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)")
    
    print(f"   üîß –§—É–Ω–∫—Ü–∏–π: 200+")
    print(f"   üåê API endpoints: 50+")
    print(f"   üì± –í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü: 10+")
    print(f"   ü§ñ –°–∏—Å—Ç–µ–º–Ω—ã—Ö –±–æ—Ç–æ–≤: 5+")
    print()
    
    print("üîó –î–û–°–¢–£–ü–ù–´–ï –ê–î–†–ï–°–ê:")
    print(f"   üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:     http://localhost:{APP_PORT}/")
    print(f"   üì± –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä:           http://localhost:{APP_PORT}/app")
    print(f"   üîë –í—Ö–æ–¥:                 http://localhost:{APP_PORT}/login")
    print(f"   ‚ú® –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:          http://localhost:{APP_PORT}/register")
    print(f"   ‚öôÔ∏è –ú–ï–ì–ê –ê–¥–º–∏–Ω–∫–∞:         http://localhost:{APP_PORT}/admin")
    print(f"   üìÅ –§–∞–π–ª—ã:                http://localhost:{APP_PORT}/files")
    print(f"   ü§ñ –ë–æ—Ç—ã:                 http://localhost:{APP_PORT}/bots")
    print(f"   üé® –¢–µ–º—ã:                 http://localhost:{APP_PORT}/themes")
    print()
    
    print("üéØ DEMO –î–û–°–¢–£–ü–´:")
    print("   üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin@safegram.local / panel")
    print("   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    print("   ü§ñ –ë–æ—Ç—ã: /help, /weather, /translate, /time")
    print()
    
    print("‚ú® –û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
    print("   üè† –°–µ—Ä–≤–µ—Ä—ã –∏ –∫–∞–Ω–∞–ª—ã –∫–∞–∫ –≤ Discord")
    print("   üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã") 
    print("   ü§ñ –°–∏—Å—Ç–µ–º–∞ –±–æ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–≤")
    print("   üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ 500MB")
    print("   üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è")
    print("   üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —É—Ä–æ–≤–Ω–µ–π")
    print("   üõ°Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
    print("   üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    print("   üë• –î—Ä—É–∑—å—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
    print("   üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º")
    print("   üîî Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    print("   üì± –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è")
    print("   üåê API –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    print("   üé™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π")
    print("   ‚ö° –ò –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π!")
    print()
    
    print("üöÄ –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò 5.0:")
    print("   üì± –°–∏—Å—Ç–µ–º–∞ –¥—Ä—É–∑–µ–π –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
    print("   üîä –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –∑–≤–æ–Ω–∫–∏")
    print("   üìÅ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω")
    print("   ü§ñ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –±–æ—Ç—ã –∏ –ø–ª–∞–≥–∏–Ω—ã")
    print("   üîî Real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    print("   üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    print("   üõ°Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è")
    print("   üé® –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —Ç–µ–º –∏ —Å—Ç–∏–∫–µ—Ä–æ–≤")
    print("   üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("   üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã")
    print()
    
    print("=" * 90)
    print()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if not perform_startup_checks():
        print("‚ùå –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        exit(1)
    
    print()
    print("üîÑ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´:")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    create_directories()
    create_default_admin()
    
    print()
    print("üîß –ó–ê–ü–£–°–ö –§–û–ù–û–í–´–• –ü–†–û–¶–ï–°–°–û–í:")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    cleanup_sessions_periodically()
    update_user_activity_periodically()
    backup_data_periodically()
    monitor_system_health()
    process_scheduled_notifications()
    update_bot_activities()
    
    print()
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–ê –°–¢–ê–†–¢–ï:")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try:
        users = load_json(USERS_JSON, [])
        messages = load_json(MESSAGES_JSON, [])
        servers = load_json(SERVERS_JSON, [])
        bots = load_json(BOTS_JSON, [])
        
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        print(f"   üè† –°–µ—Ä–≤–µ—Ä–æ–≤: {len(servers)}")
        print(f"   ü§ñ –ë–æ—Ç–æ–≤: {len(bots)}")
    except:
        print("   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
    
    print()
    print("=" * 90)
    print()

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
    try:
        log_event("system_start", "SafeGram 5.0 Ultimate Pro+ started successfully", "system", {
            "version": APP_VERSION,
            "port": APP_PORT,
            "debug": DEBUG_MODE,
            "system_info": system_info,
            "startup_time": datetime.now().isoformat()
        })
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –∑–∞–ø—É—Å–∫–∞")

    # –ê–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if not DEBUG_MODE:  # –¢–æ–ª—å–∫–æ –≤ production —Ä–µ–∂–∏–º–µ
        open_browser_delayed()

    try:
        print(f"üåü –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {APP_PORT}...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        print()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app.run(
            host='0.0.0.0',
            port=APP_PORT,
            debug=DEBUG_MODE,
            threaded=True,
            use_reloader=False  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –≤ production
        )
        
    except KeyboardInterrupt:
        print("\n" + "=" * 50)
        print("üõë SafeGram 5.0 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("=" * 50)
        
        try:
            log_event("system_stop", "SafeGram 5.0 stopped by user", "system", {
                "stop_time": datetime.now().isoformat()
            })
        except:
            pass
            
    except OSError as e:
        if "Address already in use" in str(e):
            print(f"\n‚ùå –ü–æ—Ä—Ç {APP_PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
            print(f"   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å APP_PORT –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É {APP_PORT}")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        
        try:
            log_error(f"Server startup error: {e}")
        except:
            pass
            
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        try:
            log_error(f"Critical error: {e}")
        except:
            pass
            
    finally:
        print("\n" + "=" * 70)
        print("üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SafeGram 5.0 Ultimate Pro+!")
        print("   ü§ñ –°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –∏ –ø–æ–º–æ—â—å—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ò–ò")
        print("   üåü –í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä - –≤—Å–µ–≥–¥–∞ —Å –≤–∞–º–∏!")
        print("   üìß –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: safegram@example.com")
        print("=" * 70)

print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞ SafeGram 5.0 Ultimate Pro+")